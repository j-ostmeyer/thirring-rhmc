(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    750770,      15904]
NotebookOptionsPosition[    737671,      15676]
NotebookOutlinePosition[    738109,      15693]
CellTagsIndexPosition[    738066,      15690]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gamma", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"PauliMatrix", "[", "3", "]"}], ",", 
        RowBox[{"PauliMatrix", "[", "2", "]"}]}], "]"}], ",", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"PauliMatrix", "[", "3", "]"}], ",", 
        RowBox[{"PauliMatrix", "[", "3", "]"}]}], "]"}], ",", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"PauliMatrix", "[", "2", "]"}], ",", 
        RowBox[{"PauliMatrix", "[", "0", "]"}]}], "]"}], ",", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"PauliMatrix", "[", "3", "]"}], ",", 
        RowBox[{"PauliMatrix", "[", "1", "]"}]}], "]"}], ",", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"PauliMatrix", "[", "1", "]"}], ",", 
        RowBox[{"PauliMatrix", "[", "0", "]"}]}], "]"}]}], "}"}]}], ";"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Indices", " ", "from", " ", "1", " ", "to", " ", "5"}], ",", " ", 
    RowBox[{
     RowBox[{"gamma_", "0"}], " ", "=", " ", 
     RowBox[{"gamma", "[", 
      RowBox[{"[", "4", "]"}], "]"}]}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.853079630671754*^9, 3.8530796919465466`*^9}, {
  3.85307973567566*^9, 3.8530798527611895`*^9}, {3.8530800173725653`*^9, 
  3.8530800177576675`*^9}, {3.8530802518213897`*^9, 3.8530802825331144`*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"740f5067-d198-449e-8e17-ccf578fe9fdc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pPlus", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", "4", "]"}], "+", 
      RowBox[{"gamma", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], ")"}], "/", "2"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pMinus", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", "4", "]"}], "-", 
      RowBox[{"gamma", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], ")"}], "/", "2"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8530801501031513`*^9, 3.853080153635289*^9}, {
  3.853080193464752*^9, 3.853080249281662*^9}, {3.853080294802144*^9, 
  3.8530802961332445`*^9}},
 CellLabel->
  "In[325]:=",ExpressionUUID->"75efe0cc-4641-4ad3-af74-1ab9598d0a31"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"largeB", "=", 
   RowBox[{"{", 
    RowBox[{"bb", "\[Rule]", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"2", "b", " ", 
        RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], ")"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alpha", "=", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", "\[Rule]", 
     RowBox[{"ArcCosh", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"b", "^", "2"}], "+", 
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{"Sin", "[", "p", "]"}], "^", "2"}], "]"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"2", "b"}], ")"}]}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smallB", "=", 
   RowBox[{"{", 
    RowBox[{"b", "\[Rule]", 
     RowBox[{"1", "-", "mm", "+", 
      RowBox[{"Total", "[", 
       RowBox[{"1", "-", 
        RowBox[{"Cos", "[", "p", "]"}]}], "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pSlash", "=", 
   RowBox[{"{", 
    RowBox[{"pS", "->", 
     RowBox[{
      RowBox[{
       RowBox[{"p", "[", 
        RowBox[{"[", "1", "]"}], "]"}], 
       RowBox[{"gamma", "[", 
        RowBox[{"[", "4", "]"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"p", "[", 
        RowBox[{"[", "2", "]"}], "]"}], 
       RowBox[{"gamma", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"p", "[", 
        RowBox[{"[", "3", "]"}], "]"}], 
       RowBox[{"gamma", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"momentum", "=", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"p0", ",", "p1", ",", "p2"}], "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.853080891656747*^9, 3.853080894792759*^9}, {
  3.853082249812586*^9, 3.8530823739889803`*^9}, {3.853083683450062*^9, 
  3.8530837160230722`*^9}, {3.8530838769322915`*^9, 3.8530838777821393`*^9}, {
  3.853083910128193*^9, 3.853083960027766*^9}, {3.853084419212673*^9, 
  3.8530844354807005`*^9}, {3.8530844657111616`*^9, 3.8530845591992683`*^9}, {
  3.853138133796054*^9, 3.853138148653447*^9}},
 CellLabel->
  "In[327]:=",ExpressionUUID->"c33e2859-8cbd-4cd1-955a-951126b71e18"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"p\\\", \\\"\[LeftDoubleBracket]\
\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of \
object.\"", 2, 330, 159, 18525188185308585000, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8539082419185157`*^9, 3.8547063058503723`*^9, 
  3.855050301409628*^9, 3.8577971030880485`*^9},
 CellLabel->
  "During evaluation of \
In[327]:=",ExpressionUUID->"56d4ddd8-46da-4c4f-afae-4e04d919c267"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"p\\\", \\\"\[LeftDoubleBracket]\
\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of \
object.\"", 2, 330, 160, 18525188185308585000, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8539082419185157`*^9, 3.8547063058503723`*^9, 
  3.855050301409628*^9, 3.8577971030991583`*^9},
 CellLabel->
  "During evaluation of \
In[327]:=",ExpressionUUID->"1a196158-02f8-4362-a665-13ba6f958a7d"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"p\\\", \\\"\[LeftDoubleBracket]\
\\\", \\\"3\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of \
object.\"", 2, 330, 161, 18525188185308585000, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8539082419185157`*^9, 3.8547063058503723`*^9, 
  3.855050301409628*^9, 3.857797103109209*^9},
 CellLabel->
  "During evaluation of \
In[327]:=",ExpressionUUID->"caad92f0-e38d-4289-b811-b552dbc73819"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partd\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 330, 162, 18525188185308585000, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8539082419185157`*^9, 3.8547063058503723`*^9, 
  3.855050301409628*^9, 3.8577971031183977`*^9},
 CellLabel->
  "During evaluation of \
In[327]:=",ExpressionUUID->"4d3befb3-1921-4db3-9b8b-199008241985"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[CapitalDelta]", "[", 
   RowBox[{"m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{"2", "\[Alpha]"}], "]"}], 
    RowBox[{"(", 
     RowBox[{"b", "-", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", "\[Alpha]"}], "]"}]}], ")"}]}], "+", 
   RowBox[{
    RowBox[{"m", "^", "2"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Exp", "[", "\[Alpha]", "]"}], "-", "b"}], ")"}]}], "+", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"index", "\[Equal]", "3"}], ",", "0", ",", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[Alpha]"}], 
        RowBox[{"(", 
         RowBox[{"Ls", "-", "1"}], ")"}]}], "]"}], "4", "m", " ", "b", " ", 
      RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}]}], "]"}], "+", 
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "2"}], "\[Alpha]", 
      RowBox[{"(", 
       RowBox[{"Ls", "-", "1"}], ")"}]}], "]"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "^", "2"}], 
       RowBox[{"(", 
        RowBox[{"b", "-", 
         RowBox[{"Exp", "[", 
          RowBox[{"-", "\[Alpha]"}], "]"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "2"}], "\[Alpha]"}], "]"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Exp", "[", "\[Alpha]", "]"}], "-", "b"}], ")"}]}]}], 
     ")"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"aPlus", "[", 
   RowBox[{"m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{"bb", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Exp", "[", "\[Alpha]", "]"}], "-", "b"}], ")"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"m", "^", "2"}]}], ")"}], "/", 
    RowBox[{"\[CapitalDelta]", "[", 
     RowBox[{"m", ",", "index"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"aMinus", "[", 
   RowBox[{"m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{"bb", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{"-", "\[Alpha]"}], "]"}], "-", "b"}], ")"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"m", "^", "2"}]}], ")"}], "/", 
    RowBox[{"\[CapitalDelta]", "[", 
     RowBox[{"m", ",", "index"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"aM", "[", 
   RowBox[{"m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{"bb", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], "m", " ", "b", " ", 
       RowBox[{"Sinh", "[", "\[Alpha]", "]"}], 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"index", "\[Equal]", "3"}], ",", "I", ",", "1"}], "]"}]}], 
      "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "\[Alpha]"}], 
         RowBox[{"(", 
          RowBox[{"Ls", "-", "1"}], ")"}]}], "]"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", "2"}], "\[Alpha]"}], "]"}], 
          RowBox[{"(", 
           RowBox[{"b", "-", 
            RowBox[{"Exp", "[", "\[Alpha]", "]"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"m", "^", "2"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Exp", "[", 
             RowBox[{"-", "\[Alpha]"}], "]"}], "-", "b"}], ")"}]}]}], 
        ")"}]}]}], ")"}], "/", 
    RowBox[{"\[CapitalDelta]", "[", 
     RowBox[{"m", ",", "index"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"greens", "[", 
   RowBox[{"s_", ",", "m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"IdentityMatrix", "[", "4", "]"}], "bb", "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[Alpha]"}], " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"s", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "Ls"}], ",", 
        RowBox[{
         RowBox[{"s", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "-", 
         RowBox[{"s", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"s", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "-", 
         RowBox[{"s", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"pPlus", " ", 
       RowBox[{"aPlus", "[", 
        RowBox[{"m", ",", "index"}], "]"}]}], "+", 
      RowBox[{"pMinus", " ", 
       RowBox[{"aMinus", "[", 
        RowBox[{"m", ",", "index"}], "]"}]}]}], ")"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[Alpha]"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"s", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "+", 
        RowBox[{"s", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", "2"}], ")"}]}], "]"}]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"pPlus", " ", 
       RowBox[{"aMinus", "[", 
        RowBox[{"m", ",", "index"}], "]"}]}], "+", 
      RowBox[{"pMinus", " ", 
       RowBox[{"aPlus", "[", 
        RowBox[{"m", ",", "index"}], "]"}]}]}], ")"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[Alpha]"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", "Ls"}], "-", 
        RowBox[{"s", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", 
        RowBox[{"s", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], "]"}]}], "+", 
   RowBox[{
    RowBox[{"IdentityMatrix", "[", "4", "]"}], 
    RowBox[{"aM", "[", 
     RowBox[{"m", ",", "index"}], "]"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[Alpha]"}], 
        RowBox[{"(", 
         RowBox[{"Ls", "-", 
          RowBox[{"s", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"s", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}]}], "]"}], "+", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[Alpha]"}], 
        RowBox[{"(", 
         RowBox[{"Ls", "+", 
          RowBox[{"s", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "-", 
          RowBox[{"s", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}]}], "]"}]}], 
     ")"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.8530792319148254`*^9, 3.853079323687731*^9}, {
  3.8530803437343946`*^9, 3.853080459088523*^9}, {3.85308050547338*^9, 
  3.8530805729369464`*^9}, {3.8530806787984314`*^9, 3.8530807707255397`*^9}, {
  3.853080800869742*^9, 3.8530808779647536`*^9}, {3.8530811036199894`*^9, 
  3.8530812533129487`*^9}, {3.8530812843159866`*^9, 3.8530813713500557`*^9}, {
  3.853081505797224*^9, 3.8530818140943384`*^9}, {3.8530818617679243`*^9, 
  3.8530818731681395`*^9}, {3.853081940287614*^9, 3.853082016861598*^9}, {
  3.8530837879798656`*^9, 3.853083797706045*^9}, {3.853083847771142*^9, 
  3.853083873671548*^9}, {3.8530840965347605`*^9, 3.8530840972605615`*^9}, {
  3.8531386761756287`*^9, 3.853138679573405*^9}, {3.8531393972779207`*^9, 
  3.8531394252944517`*^9}},
 CellLabel->
  "In[332]:=",ExpressionUUID->"92f17380-9213-4a88-bf32-5bfb428ce6f7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dDaggerG", "[", 
   RowBox[{"s_", ",", "m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"pPlus", ".", 
     RowBox[{"greens", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "s"}], "}"}], ",", "m", ",", "index"}], "]"}]}]}], 
   "+", 
   RowBox[{"b", " ", 
    RowBox[{"greens", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "s"}], "}"}], ",", "m", ",", "index"}], "]"}]}], "+", 
   RowBox[{"m", " ", 
    RowBox[{"pMinus", ".", 
     RowBox[{"greens", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Ls", ",", "s"}], "}"}], ",", "m", ",", "index"}], 
      "]"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pMdDaggerG", "[", 
   RowBox[{"s_", ",", "m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"index", "\[Equal]", "1"}], ",", "1", ",", 
      RowBox[{"-", "I"}]}], "]"}], "b", " ", 
    RowBox[{"pMinus", ".", 
     RowBox[{"greens", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "s"}], "}"}], ",", "m", ",", "index"}], "]"}]}]}], 
   "+", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"index", "\[Equal]", "1"}], ",", "1", ",", "1"}], "]"}], "m", 
    " ", 
    RowBox[{"pMinus", ".", 
     RowBox[{"greens", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Ls", ",", "s"}], "}"}], ",", "m", ",", "index"}], 
      "]"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g0pMdDaggerG", "[", 
   RowBox[{"s_", ",", "m_", ",", "index_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"-", "I"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"p", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", 
   RowBox[{"pPlus", ".", 
    RowBox[{"greens", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "s"}], "}"}], ",", "m", ",", "index"}], 
     "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.8530824353631988`*^9, 3.853082443678746*^9}, {
   3.8530826444258585`*^9, 3.8530826942915077`*^9}, {3.8530827251450214`*^9, 
   3.8530828963880696`*^9}, {3.8530833951229043`*^9, 
   3.8530833979685917`*^9}, {3.8530841032710423`*^9, 
   3.8530841051028414`*^9}, {3.8530842762996707`*^9, 3.853084360962994*^9}, {
   3.85308451927659*^9, 3.853084536799024*^9}, 3.8530846453349905`*^9, {
   3.8530849554000936`*^9, 3.853084961380535*^9}, {3.853493375643388*^9, 
   3.853493390010967*^9}, {3.853493441537595*^9, 3.85349346230179*^9}, {
   3.853493537201743*^9, 3.8534935399414525`*^9}, {3.8535817521325445`*^9, 
   3.853581809025462*^9}, {3.8535824179896364`*^9, 3.8535824234688077`*^9}, {
   3.8577970276403074`*^9, 3.857797091244297*^9}, {3.857797281804384*^9, 
   3.8577972889656563`*^9}, 3.8577973856333895`*^9, {3.8577976207717896`*^9, 
   3.857797623115336*^9}, {3.857797653640729*^9, 3.857797663868251*^9}, {
   3.8577981391566052`*^9, 3.8577981394614725`*^9}},
 CellLabel->
  "In[409]:=",ExpressionUUID->"7bf90efd-f64f-4282-8e42-e2a2d9dbef53"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"corr001", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Tr", "[", 
      RowBox[{"g0pMdDaggerG", "[", 
       RowBox[{"1", ",", "m", ",", "1"}], "]"}], "]"}], "/.", 
     RowBox[{"Ls", "\[Rule]", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"1", "/", "x"}], "]"}], "/", "\[Alpha]"}]}]}], "//", 
    "Simplify"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"corr0L1", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Tr", "[", 
      RowBox[{"pMdDaggerG", "[", 
       RowBox[{"Ls", ",", "m", ",", "1"}], "]"}], "]"}], "/.", 
     RowBox[{"Ls", "\[Rule]", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"1", "/", "x"}], "]"}], "/", "\[Alpha]"}]}]}], "//", 
    "Simplify"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"corr003", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Tr", "[", 
      RowBox[{"g0pMdDaggerG", "[", 
       RowBox[{"1", ",", "m", ",", "3"}], "]"}], "]"}], "/.", 
     RowBox[{"Ls", "\[Rule]", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"1", "/", "x"}], "]"}], "/", "\[Alpha]"}]}]}], "//", 
    "Simplify"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"corr0L3", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Tr", "[", 
      RowBox[{"pMdDaggerG", "[", 
       RowBox[{"Ls", ",", "m", ",", "3"}], "]"}], "]"}], "/.", 
     RowBox[{"Ls", "\[Rule]", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"1", "/", "x"}], "]"}], "/", "\[Alpha]"}]}]}], "//", 
    "Simplify"}], "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQrSzxTlln6xvHkBh/fRC9SonZFkRn+V9wBNHxxvM8
QPTt68vAtBrn0UQQrZfOkASi6+KPHQTRKXqeh0B0E7v6bRCdtun5XRAdFM2p
pgukjUr8dEG0nusvIxAdHXHKEkQL8JnZgWgp/WhHEL2qM9oVRAcY/wwC0WfK
NoSD6Gl266NAtNhHhXgQHcV0MglEH1rA1QSid88WaAbRNgLLFoDos7Y8q8H6
LIMvuAFpK5vJl0C0ROG9OyB6HlvfAxAttl71GYjeoqnyCkTnpXmu/AKkVwcm
bwDR4U4ax0B0j+MSMM32ec5pEG1cqXsGRB8JfHZYfhvQnuWLj4DolOarF97s
eOPY+E35MojWKAq6A6IX/BG9B6IBMZ+7ow==
  "],
 CellLabel->
  "In[412]:=",ExpressionUUID->"693d1061-5990-4107-a3da-255094e82c13"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"p\\\", \\\"\[LeftDoubleBracket]\
\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of \
object.\"", 2, 412, 167, 18525188185308585000, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.857797108438319*^9, 3.8577972966109133`*^9, 
  3.8577973892773695`*^9, 3.8577976659428263`*^9, 3.8577981433455477`*^9},
 CellLabel->
  "During evaluation of \
In[412]:=",ExpressionUUID->"244477fd-b3b6-4fbe-8b97-9cea43421cc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Tr", "@", 
   RowBox[{"pMdDaggerG", "[", 
    RowBox[{"1", ",", "m", ",", "3"}], "]"}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8531383738309927`*^9, 3.8531383757776284`*^9}, {
  3.8531384269174356`*^9, 3.853138428524995*^9}, {3.853493651515235*^9, 
  3.8534936519066896`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"53d023e6-b373-4b93-828a-d7159b9666c7"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox[
         RowBox[{"b", " ", "bb", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"2", "+", "Ls"}], ")"}]}], " ", "\[Alpha]"}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"2", " ", "\[Alpha]"}]]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"Ls", " ", "\[Alpha]"}]]}], " ", "m"}], "+", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"2", "+", "Ls"}], ")"}], " ", "\[Alpha]"}]], " ", 
             "m"}], "+", 
            RowBox[{"b", " ", 
             SuperscriptBox["\[ExponentialE]", "\[Alpha]"], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]], "-", 
               RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"Ls", " ", "\[Alpha]"}]], " ", "m"}]}], ")"}]}], "+", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"2", " ", "\[Alpha]"}]], " ", 
             RowBox[{"(", 
              RowBox[{"1", "-", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "\[ImaginaryI]"}], ")"}], " ", 
                SuperscriptBox["m", "2"]}]}], ")"}]}], "+", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "-", "\[ImaginaryI]"}], ")"}], " ", 
                SuperscriptBox["m", "2"]}]}], ")"}]}]}], ")"}]}], 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["m", "2"]}], ")"}], " ", 
           RowBox[{"Sinh", "[", 
            RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{"b", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              SuperscriptBox["m", "2"], " ", 
              RowBox[{"Sinh", "[", 
               RowBox[{"\[Alpha]", "-", 
                RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}], "+", 
             RowBox[{"Sinh", "[", 
              RowBox[{"\[Alpha]", "+", 
               RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}], ")"}]}]}]], 
        RowBox[{"Ls", "\[NotEqual]", "1"}]},
       {
        FractionBox[
         RowBox[{"4", " ", "b", " ", "bb", " ", 
          RowBox[{"(", 
           RowBox[{"b", "+", "m"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "\[ImaginaryI]"}], " ", "m"}], "+", 
            RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], ")"}]}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["m", "2"], "+", 
          RowBox[{"2", " ", "b", " ", 
           RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}]], 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",
 CellChangeTimes->{3.853138378285*^9, 3.8531384392440896`*^9, 
  3.853493680649721*^9, 3.8539082738640375`*^9, 3.854706336338373*^9, 
  3.8550503292136307`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"9eea88f2-0096-4609-b11d-6a19a5a2d174"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cP001", "[", 
   RowBox[{"m_", ",", "x_", ",", "p0_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"corr001", "[", 
          RowBox[{"m", ",", "x"}], "]"}], "/.", "largeB"}], "/.", "alpha"}], "/.",
        "smallB"}], "/.", 
      RowBox[{"p", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"p0", ",", "0", ",", "0"}], "}"}]}]}], "/.", 
     RowBox[{"mm", "\[Rule]", "1.0"}]}], "//", "Simplify"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cP0L1", "[", 
   RowBox[{"m_", ",", "x_", ",", "p0_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"corr0L1", "[", 
          RowBox[{"m", ",", "x"}], "]"}], "/.", "largeB"}], "/.", "alpha"}], "/.",
        "smallB"}], "/.", 
      RowBox[{"p", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"p0", ",", "0", ",", "0"}], "}"}]}]}], "/.", 
     RowBox[{"mm", "\[Rule]", "1.0"}]}], "//", "Simplify"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cP003", "[", 
   RowBox[{"m_", ",", "x_", ",", "p0_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"corr003", "[", 
          RowBox[{"m", ",", "x"}], "]"}], "/.", "largeB"}], "/.", "alpha"}], "/.",
        "smallB"}], "/.", 
      RowBox[{"p", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"p0", ",", "0", ",", "0"}], "}"}]}]}], "/.", 
     RowBox[{"mm", "\[Rule]", "1.0"}]}], "//", "Simplify"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cP0L3", "[", 
   RowBox[{"m_", ",", "x_", ",", "p0_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"corr0L3", "[", 
          RowBox[{"m", ",", "x"}], "]"}], "/.", "largeB"}], "/.", "alpha"}], "/.",
        "smallB"}], "/.", 
      RowBox[{"p", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"p0", ",", "0", ",", "0"}], "}"}]}]}], "/.", 
     RowBox[{"mm", "\[Rule]", "1.0"}]}], "//", "Simplify"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.853138210087763*^9, 3.85313822730744*^9}, {
   3.8531383048941936`*^9, 3.8531383054848256`*^9}, {3.8531387094188027`*^9, 
   3.8531387877537584`*^9}, {3.8531388221326237`*^9, 3.853138842629347*^9}, {
   3.853138884407397*^9, 3.8531388866113176`*^9}, {3.853139176352435*^9, 
   3.853139208543386*^9}, 3.853139503629712*^9, {3.8531395489403033`*^9, 
   3.853139582698432*^9}, {3.8531585792287607`*^9, 3.853158596218671*^9}, {
   3.8531587330646987`*^9, 3.853158771925006*^9}, {3.853158805048331*^9, 
   3.853158814992364*^9}, {3.8531589446434145`*^9, 3.8531589448443747`*^9}, {
   3.8531589899815645`*^9, 3.8531589906252947`*^9}, {3.8531590447698965`*^9, 
   3.853159046786951*^9}, {3.8531591483106866`*^9, 3.85315924065812*^9}, {
   3.8531592888547*^9, 3.853159300821088*^9}, {3.853159460635087*^9, 
   3.8531594987539473`*^9}, {3.853159555893402*^9, 3.8531595909841185`*^9}, {
   3.854790166202183*^9, 3.8547901728017445`*^9}, {3.8547902927714024`*^9, 
   3.8547903045114484`*^9}, {3.8547903939164467`*^9, 
   3.8547904064723163`*^9}, {3.8547905125015235`*^9, 3.854790517983301*^9}, {
   3.8547905804543295`*^9, 3.854790603148551*^9}, {3.854790850730753*^9, 
   3.8547908563885527`*^9}, {3.854797416875345*^9, 3.8547974485297422`*^9}, {
   3.854797502400584*^9, 3.854797528216323*^9}, {3.8547981130633397`*^9, 
   3.8547981199293995`*^9}, {3.8547981937870755`*^9, 
   3.8547982043401957`*^9}, {3.8547982479512625`*^9, 
   3.8547982517973776`*^9}, {3.854798690208396*^9, 3.854798691837695*^9}, {
   3.854878582684799*^9, 3.8548785867712045`*^9}, {3.85488113031022*^9, 
   3.854881131503312*^9}, {3.8553136710325403`*^9, 3.8553136793870025`*^9}, {
   3.8553140751063175`*^9, 3.8553140867330856`*^9}, {3.855314429955652*^9, 
   3.8553144352419643`*^9}, {3.8553144665350475`*^9, 
   3.8553144791946077`*^9}, {3.855314553441498*^9, 3.8553145584114137`*^9}, {
   3.855314714162235*^9, 3.8553147170235176`*^9}, {3.8553152935880675`*^9, 
   3.855315346186854*^9}, {3.8553155071447473`*^9, 3.855315511288806*^9}, {
   3.8556485176224556`*^9, 3.8556485254861913`*^9}, {3.855648780322313*^9, 
   3.855648783766054*^9}, {3.8577971493889*^9, 3.8577971607475166`*^9}, {
   3.857797391769882*^9, 3.8577973955617447`*^9}, {3.858236396302568*^9, 
   3.8582364072681284`*^9}, {3.858307487385509*^9, 3.858307492907761*^9}, {
   3.858307532781911*^9, 3.8583075359037247`*^9}, {3.858307578394451*^9, 
   3.8583075840843415`*^9}, {3.858313285575528*^9, 3.858313289463106*^9}},
 CellLabel->
  "In[486]:=",ExpressionUUID->"0650cb74-359f-4471-9ceb-412b93193255"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cT001", "[", 
   RowBox[{"m_", ",", "x_", ",", "t_", ",", "Lt_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"cP001", "[", 
         RowBox[{"m", ",", "x", ",", "p0"}], "]"}], 
        RowBox[{"Exp", "[", 
         RowBox[{"I", " ", "t", " ", "p0"}], "]"}]}], "/.", 
       RowBox[{"p0", "\[Rule]", 
        RowBox[{"2", "Pi", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "+", 
            RowBox[{"1", "/", "2"}]}], ")"}], "/", "Lt"}]}]}]}], "//", "N"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", 
       RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}], "/", 
   "Lt"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cT0L1", "[", 
   RowBox[{"m_", ",", "x_", ",", "t_", ",", "Lt_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"cP0L1", "[", 
         RowBox[{"m", ",", "x", ",", "p0"}], "]"}], 
        RowBox[{"Exp", "[", 
         RowBox[{"I", " ", "t", " ", "p0"}], "]"}]}], "/.", 
       RowBox[{"p0", "\[Rule]", 
        RowBox[{"2", "Pi", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "+", 
            RowBox[{"1", "/", "2"}]}], ")"}], "/", "Lt"}]}]}]}], "//", "N"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", 
       RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}], "/", 
   "Lt"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cT003", "[", 
   RowBox[{"m_", ",", "x_", ",", "t_", ",", "Lt_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"cP003", "[", 
         RowBox[{"m", ",", "x", ",", "p0"}], "]"}], 
        RowBox[{"Exp", "[", 
         RowBox[{"I", " ", "t", " ", "p0"}], "]"}]}], "/.", 
       RowBox[{"p0", "\[Rule]", 
        RowBox[{"2", "Pi", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "+", 
            RowBox[{"1", "/", "2"}]}], ")"}], "/", "Lt"}]}]}]}], "//", "N"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", 
       RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}], "/", 
   "Lt"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cT0L3", "[", 
   RowBox[{"m_", ",", "x_", ",", "t_", ",", "Lt_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"cP0L3", "[", 
         RowBox[{"m", ",", "x", ",", "p0"}], "]"}], 
        RowBox[{"Exp", "[", 
         RowBox[{"I", " ", "t", " ", "p0"}], "]"}]}], "/.", 
       RowBox[{"p0", "\[Rule]", 
        RowBox[{"2", "Pi", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "+", 
            RowBox[{"1", "/", "2"}]}], ")"}], "/", "Lt"}]}]}]}], "//", "N"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", 
       RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}], "/", "Lt"}]}]}], "Input",
 CellChangeTimes->{{3.8531592675124493`*^9, 3.853159275442876*^9}, {
   3.853159324547067*^9, 3.853159411908471*^9}, {3.8531596469511147`*^9, 
   3.853159778202741*^9}, {3.853159817804695*^9, 3.8531598991182623`*^9}, {
   3.8531600539582853`*^9, 3.8531600542672577`*^9}, 3.8531608961540165`*^9, {
   3.8531615297913346`*^9, 3.853161537927605*^9}, {3.8531618135474944`*^9, 
   3.8531618467147818`*^9}, {3.8536876892699347`*^9, 3.8536877010582247`*^9}},
 CellLabel->
  "In[490]:=",ExpressionUUID->"50230619-a8f2-4b54-a294-7d5ba3ab15c5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"exactC", "[", 
   RowBox[{"m_", ",", "t_", ",", "Lt_", ",", "mm_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"ArcSinh", "[", "m", "]"}]}], " ", "t"}], "]"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", "Lt"}], " ", 
            RowBox[{"ArcSinh", "[", "m", "]"}]}], "]"}], "+", "1"}], ")"}]}], 
       "/", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "+", 
         RowBox[{"m", "^", "2"}]}], "]"}]}], "2", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "mm"}], ")"}], "^", "2"}]}], ")"}]}], "-", 
     RowBox[{"KroneckerDelta", "[", 
      RowBox[{"t", ",", "0"}], "]"}]}], "/.", 
    RowBox[{"m", "\[Rule]", 
     RowBox[{"m", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "mm"}], ")"}], "^", "2"}]}], ")"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"branchCuts", "[", 
   RowBox[{"m_", ",", "t_", ",", "Lt_", ",", "mm_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["2", 
        RowBox[{"4", "+", "t"}]], " ", 
       RowBox[{
        SqrtBox[
         RowBox[{"3", " ", "\[Pi]"}]], "/", "Pi"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SuperscriptBox["2", "Lt"]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "m"}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"3", "+", 
          RowBox[{"4", " ", "Lt"}], "-", 
          RowBox[{"4", " ", "t"}]}], ")"}], 
        RowBox[{"3", "/", "2"}]]}]], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["2", 
        RowBox[{"4", "+", "Lt", "-", "t"}]], " ", 
       RowBox[{
        SqrtBox[
         RowBox[{"3", " ", "\[Pi]"}]], "/", "Pi"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SuperscriptBox["2", "Lt"]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "3"}], "+", 
         RowBox[{"4", " ", "m"}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"3", "+", 
          RowBox[{"4", " ", "t"}]}], ")"}], 
        RowBox[{"3", "/", "2"}]]}]]}], "/.", 
    RowBox[{"m", "\[Rule]", 
     RowBox[{"m", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "mm"}], ")"}], "^", "2"}]}], ")"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.855313846801247*^9, 3.8553139582612033`*^9}, {
   3.855314356352124*^9, 3.855314358915959*^9}, {3.8553146706493425`*^9, 
   3.8553146758124213`*^9}, {3.8553148748649507`*^9, 3.8553148857659616`*^9}, 
   3.855314917058282*^9, {3.855315168058448*^9, 3.8553151838798633`*^9}, {
   3.8553152472955513`*^9, 3.8553152577559357`*^9}, 3.855648608681843*^9, {
   3.8556486471194563`*^9, 3.8556486525357804`*^9}, 3.8583074525535965`*^9},
 CellLabel->
  "In[460]:=",ExpressionUUID->"e0a37022-c889-44d6-86f9-fe5ea0d8d061"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListLogPlot", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Re", "[", 
           RowBox[{
            RowBox[{"cT001", "[", 
             RowBox[{"m", ",", 
              RowBox[{"Exp", "[", 
               RowBox[{"-", "Ls"}], "]"}], ",", "t", ",", "Lt"}], "]"}], "+", 
            RowBox[{"cT0L1", "[", 
             RowBox[{"m", ",", 
              RowBox[{"Exp", "[", 
               RowBox[{"-", "Ls"}], "]"}], ",", "t", ",", "Lt"}], "]"}]}], 
           "]"}], ",", 
          RowBox[{"Re", "[", 
           RowBox[{
            RowBox[{"cT003", "[", 
             RowBox[{"m", ",", 
              RowBox[{"Exp", "[", 
               RowBox[{"-", "Ls"}], "]"}], ",", "t", ",", "Lt"}], "]"}], "+", 
            RowBox[{"cT0L3", "[", 
             RowBox[{"m", ",", 
              RowBox[{"Exp", "[", 
               RowBox[{"-", "Ls"}], "]"}], ",", "t", ",", "Lt"}], "]"}]}], 
           "]"}], ",", 
          RowBox[{"exactC", "[", 
           RowBox[{"m", ",", "t", ",", "Lt", ",", "mm"}], "]"}], ",", 
          RowBox[{
           RowBox[{"exactC", "[", 
            RowBox[{"m", ",", "t", ",", "Lt", ",", "mm"}], "]"}], "+", 
           RowBox[{"branchCuts", "[", 
            RowBox[{"m", ",", "t", ",", "Lt", ",", "mm"}], "]"}]}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "1", ",", 
          RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"C", "[", "h", "]"}], ",", 
          RowBox[{"C", "[", "3", "]"}], ",", 
          RowBox[{"C", "[", "0", "]"}], ",", 
          RowBox[{"OverTilde", "[", 
           RowBox[{"C", "[", "0", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Center", ",", "Top"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"Frame", "\[Rule]", "True"}], ",", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"t", ",", "\"\<C(t)\>\""}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "0.05"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Lt", ",", "20"}], "}"}], ",", "2", ",", "60", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Ls", ",", "20"}], "}"}], ",", 
     RowBox[{"-", "10"}], ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mm", ",", "1"}], "}"}], ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8531599099451733`*^9, 3.8531599366223536`*^9}, {
   3.8531600005868683`*^9, 3.8531600386778054`*^9}, {3.853160098906339*^9, 
   3.8531601826830106`*^9}, {3.8531605598751373`*^9, 
   3.8531606319969673`*^9}, {3.8531607643824825`*^9, 3.8531607653496*^9}, 
   3.8531609301194725`*^9, {3.8531610256236973`*^9, 3.853161026910263*^9}, {
   3.8531610607905083`*^9, 3.8531610613423433`*^9}, {3.853161171566023*^9, 
   3.8531611815029216`*^9}, {3.8531613532373133`*^9, 
   3.8531613857406673`*^9}, {3.853161422905451*^9, 3.8531614323594365`*^9}, {
   3.8531615528732157`*^9, 3.853161581860729*^9}, 3.853161691620407*^9, {
   3.853161727099635*^9, 3.853161738813038*^9}, {3.8531618825819616`*^9, 
   3.8531618833897376`*^9}, {3.8531620556559734`*^9, 3.853162056690858*^9}, {
   3.853162104113628*^9, 3.8531621110414963`*^9}, {3.8531621529987316`*^9, 
   3.8531621592466345`*^9}, {3.8532290676039176`*^9, 
   3.8532290882051105`*^9}, {3.8532291664526095`*^9, 
   3.8532291673380065`*^9}, {3.853229235486898*^9, 3.85322926920555*^9}, {
   3.853229515431531*^9, 3.8532295200567336`*^9}, {3.8532295693696327`*^9, 
   3.853229569669893*^9}, {3.8532301029315796`*^9, 3.853230103069422*^9}, {
   3.853230243821681*^9, 3.8532302620898867`*^9}, {3.853230364492304*^9, 
   3.853230438791279*^9}, {3.8532304705981092`*^9, 3.853230471499644*^9}, {
   3.8532305134084444`*^9, 3.8532305733974385`*^9}, {3.853237975537938*^9, 
   3.8532379758261833`*^9}, {3.8532381211358156`*^9, 
   3.8532381251999793`*^9}, {3.8532381859058046`*^9, 
   3.8532381944741664`*^9}, {3.853238224785236*^9, 3.853238228240061*^9}, {
   3.8532382929158735`*^9, 3.853238296384388*^9}, {3.8532383345795546`*^9, 
   3.853238338042133*^9}, {3.853238617296594*^9, 3.853238621071262*^9}, {
   3.8532387050206747`*^9, 3.8532387195620193`*^9}, {3.853238767233185*^9, 
   3.853238791384282*^9}, {3.853238918958671*^9, 3.853238923231606*^9}, {
   3.8532391161001625`*^9, 3.853239228778452*^9}, {3.853239289209361*^9, 
   3.8532395821743097`*^9}, {3.853239652166733*^9, 3.8532396942393627`*^9}, {
   3.853239738517455*^9, 3.853239799818989*^9}, 3.853239924751983*^9, {
   3.8532399571429567`*^9, 3.8532399582871375`*^9}, {3.853240188416664*^9, 
   3.8532402399736123`*^9}, {3.8534768543262005`*^9, 
   3.8534768675353355`*^9}, {3.853582056277481*^9, 3.85358210820378*^9}, {
   3.853582153185946*^9, 3.8535822025191393`*^9}, {3.8536870979069095`*^9, 
   3.8536871019733973`*^9}, {3.853687138428586*^9, 3.853687143241025*^9}, {
   3.8536872413736277`*^9, 3.8536872609442396`*^9}, {3.853687302833965*^9, 
   3.853687367475554*^9}, 3.8536874570386543`*^9, {3.8536875327973404`*^9, 
   3.853687538145853*^9}, {3.853687577281616*^9, 3.853687609809808*^9}, {
   3.853687709897353*^9, 3.8536877376332197`*^9}, {3.8536878216352887`*^9, 
   3.8536878472912025`*^9}, {3.8536879172745533`*^9, 
   3.8536879226475763`*^9}, {3.853687984130516*^9, 3.8536879850355344`*^9}, {
   3.8536883762409353`*^9, 3.8536883891447163`*^9}, {3.8536891812344913`*^9, 
   3.8536891894151115`*^9}, {3.8536892196212635`*^9, 
   3.8536892200773487`*^9}, {3.8536894352011256`*^9, 
   3.8536894756688213`*^9}, {3.853689820010272*^9, 3.8536898388091507`*^9}, {
   3.8536898721990604`*^9, 3.8536898918272886`*^9}, {3.8536899242102723`*^9, 
   3.853690004876452*^9}, {3.853690157947237*^9, 3.8536901896372595`*^9}, {
   3.8537445891253767`*^9, 3.853744598174884*^9}, {3.8537446320458174`*^9, 
   3.85374464212827*^9}, {3.85374500973412*^9, 3.853745028369569*^9}, {
   3.8537450625723906`*^9, 3.853745066502257*^9}, {3.853745552410989*^9, 
   3.853745649616069*^9}, 3.853745680054994*^9, {3.853745719108817*^9, 
   3.853745745798215*^9}, {3.8537457938582582`*^9, 3.8537458205668144`*^9}, {
   3.8537458514309454`*^9, 3.8537458793522053`*^9}, {3.8537459260039673`*^9, 
   3.8537459634390144`*^9}, {3.853745996809063*^9, 3.853746040508479*^9}, {
   3.8537462772831545`*^9, 3.853746290426011*^9}, {3.853746323895973*^9, 
   3.8537463283794436`*^9}, {3.8537463959759407`*^9, 3.853746407278967*^9}, {
   3.85374662157484*^9, 3.8537466416633167`*^9}, {3.8537469155704255`*^9, 
   3.853746940044613*^9}, {3.8537473524584875`*^9, 3.8537473749316473`*^9}, {
   3.8537474414925804`*^9, 3.853747463585397*^9}, {3.8539083830865927`*^9, 
   3.853908397141574*^9}, {3.853908437990876*^9, 3.853908464135228*^9}, {
   3.8539086395782948`*^9, 3.8539086438976035`*^9}, {3.8539087239991484`*^9, 
   3.8539087281383915`*^9}, {3.8539088428756723`*^9, 
   3.8539088461260133`*^9}, {3.8539089392692366`*^9, 3.853908974989146*^9}, 
   3.853909009711687*^9, {3.8539090466838684`*^9, 3.8539091129822173`*^9}, {
   3.8539091658013444`*^9, 3.853909195144263*^9}, 3.8539095477897263`*^9, {
   3.854708519825747*^9, 3.8547085206487427`*^9}, {3.854727077481021*^9, 
   3.8547270782042723`*^9}, {3.85473238571743*^9, 3.8547324011299*^9}, {
   3.8547324408189116`*^9, 3.8547324896180143`*^9}, {3.854732708771245*^9, 
   3.85473272090946*^9}, {3.8547854370301228`*^9, 3.8547855218108473`*^9}, 
   3.8547855836192746`*^9, {3.854789850657545*^9, 3.8547898587965565`*^9}, 
   3.8547908813946915`*^9, {3.8547974565348043`*^9, 3.8547974606737375`*^9}, {
   3.8547975910227213`*^9, 3.854797660172141*^9}, {3.854797716413064*^9, 
   3.854797775783922*^9}, {3.8547978349076195`*^9, 3.8547978806041913`*^9}, {
   3.85479792500628*^9, 3.8547979561810145`*^9}, {3.854798005728318*^9, 
   3.854798080213326*^9}, {3.8547981475561686`*^9, 3.854798167965116*^9}, {
   3.854798222644452*^9, 3.854798223919985*^9}, {3.854798702523396*^9, 
   3.854798728580109*^9}, {3.854798762463703*^9, 3.854798807123808*^9}, {
   3.8548026787246656`*^9, 3.854802723593666*^9}, {3.8548028324767036`*^9, 
   3.8548028369297037`*^9}, 3.8548029367493334`*^9, {3.854802971093337*^9, 
   3.854802982434333*^9}, {3.8548030341573315`*^9, 3.8548030344573326`*^9}, 
   3.854803066188341*^9, {3.854808033977513*^9, 3.854808053375783*^9}, {
   3.8548081766495714`*^9, 3.854808191805422*^9}, {3.854808461826889*^9, 
   3.8548084715920615`*^9}, {3.8548085288099213`*^9, 
   3.8548085340098257`*^9}, {3.8548086719461393`*^9, 
   3.8548086889146013`*^9}, {3.8548087329203753`*^9, 3.854808766781438*^9}, {
   3.8548088300052357`*^9, 3.854808861843014*^9}, 3.854808902160962*^9, {
   3.854809111065566*^9, 3.854809112343052*^9}, {3.8548122947101173`*^9, 
   3.8548124227803507`*^9}, {3.854812484437004*^9, 3.854812513786239*^9}, {
   3.8548125445514336`*^9, 3.854812598000339*^9}, {3.854813613315812*^9, 
   3.854813656956786*^9}, {3.8548137486965446`*^9, 3.854813824833913*^9}, 
   3.8548138599542456`*^9, {3.854814154218231*^9, 3.8548141577865477`*^9}, {
   3.8550512295893316`*^9, 3.8550513286652155`*^9}, {3.8550513644343777`*^9, 
   3.8550513995123143`*^9}, 3.8550514568256054`*^9, {3.8550515819367204`*^9, 
   3.8550516177544966`*^9}, {3.855051681160489*^9, 3.8550516815540085`*^9}, {
   3.855051833195566*^9, 3.8550518587464542`*^9}, {3.8550531320273914`*^9, 
   3.8550531818246765`*^9}, {3.8550532132566547`*^9, 3.8550532881270275`*^9}, 
   3.855053569080717*^9, {3.8550536944536505`*^9, 3.8550537457940955`*^9}, {
   3.8550538722015924`*^9, 3.8550539029077497`*^9}, {3.855054029314562*^9, 
   3.8550540376793165`*^9}, {3.8550578757674637`*^9, 
   3.8550578892391286`*^9}, {3.8550579579876604`*^9, 
   3.8550579672920094`*^9}, {3.855058040219183*^9, 3.8550580452605505`*^9}, {
   3.8550592343118715`*^9, 3.855059304342159*^9}, {3.8550597361384277`*^9, 
   3.855059777180867*^9}, {3.8550598202014503`*^9, 3.8550598398391914`*^9}, {
   3.8550598793767123`*^9, 3.8550598855748076`*^9}, {3.8550605098941984`*^9, 
   3.855060520696823*^9}, {3.8550622114975724`*^9, 3.8550622331825027`*^9}, {
   3.8550622731335573`*^9, 3.855062277887762*^9}, {3.8550623504313955`*^9, 
   3.8550623703483367`*^9}, {3.8550624068864994`*^9, 
   3.8550626239646096`*^9}, {3.8550626627042074`*^9, 3.855062691548333*^9}, {
   3.8550628759750824`*^9, 3.8550628797056274`*^9}, {3.8550629115281334`*^9, 
   3.8550629261121216`*^9}, {3.855313375537687*^9, 3.8553133760921965`*^9}, {
   3.855313732713724*^9, 3.855313826071065*^9}, 3.8553138840242405`*^9, {
   3.8553139758406467`*^9, 3.855314046314478*^9}, {3.8556487298505497`*^9, 
   3.8556487301033554`*^9}, {3.8577973178927855`*^9, 
   3.8577973420023327`*^9}, {3.8577981644164104`*^9, 3.857798164688379*^9}, 
   3.8583071584973965`*^9},
 CellLabel->
  "In[424]:=",ExpressionUUID->"667330f2-0a82-43f7-a25b-937d60c7e237"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`Ls$$ = 10, $CellContext`Lt$$ = 
    20, $CellContext`m$$ = 0.5093029022216797, $CellContext`mm$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 0.05}, 0, 1}, {{
       Hold[$CellContext`Lt$$], 20}, 2, 60, 1}, {{
       Hold[$CellContext`Ls$$], 20}, -10, 100}, {{
       Hold[$CellContext`mm$$], 1}, 0, 1}}, Typeset`size$$ = {
    360., {110., 115.72660448996714`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`Ls$$ = 20, $CellContext`Lt$$ = 
        20, $CellContext`m$$ = 0.05, $CellContext`mm$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListLogPlot[
        Transpose[
         Table[{
           Re[$CellContext`cT001[$CellContext`m$$, 
              
              Exp[-$CellContext`Ls$$], $CellContext`t, $CellContext`Lt$$] + \
$CellContext`cT0L1[$CellContext`m$$, 
              Exp[-$CellContext`Ls$$], $CellContext`t, $CellContext`Lt$$]], 
           Re[$CellContext`cT003[$CellContext`m$$, 
              
              Exp[-$CellContext`Ls$$], $CellContext`t, $CellContext`Lt$$] + \
$CellContext`cT0L3[$CellContext`m$$, 
              Exp[-$CellContext`Ls$$], $CellContext`t, $CellContext`Lt$$]], 
           $CellContext`exactC[$CellContext`m$$, $CellContext`t, \
$CellContext`Lt$$, $CellContext`mm$$], $CellContext`exactC[$CellContext`m$$, \
$CellContext`t, $CellContext`Lt$$, $CellContext`mm$$] + \
$CellContext`branchCuts[$CellContext`m$$, $CellContext`t, $CellContext`Lt$$, \
$CellContext`mm$$]}, {$CellContext`t, 1, $CellContext`Lt$$ - 1}]], 
        PlotLegends -> Placed[{
           C[$CellContext`h], 
           C[3], 
           C[0], 
           OverTilde[
            C[0]]}, {Center, Top}], Frame -> True, 
        FrameLabel -> {$CellContext`t, "C(t)"}], 
      "Specifications" :> {{{$CellContext`m$$, 0.05}, 0, 
         1}, {{$CellContext`Lt$$, 20}, 2, 60, 
         1}, {{$CellContext`Ls$$, 20}, -10, 100}, {{$CellContext`mm$$, 1}, 0, 
         1}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{408., {225., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.8534768696871853`*^9, {3.853477060490509*^9, 3.853477076774062*^9}, 
   3.8535820229122596`*^9, 3.853582057143485*^9, {3.8535820877516403`*^9, 
   3.853582110254277*^9}, 3.8535821544512773`*^9, {3.853582203852233*^9, 
   3.8535822101404824`*^9}, {3.8535822439142513`*^9, 3.853582261166811*^9}, 
   3.853582442553743*^9, {3.853687104122547*^9, 3.8536871516758137`*^9}, {
   3.853687253186096*^9, 3.853687304776947*^9}, {3.8536873706621923`*^9, 
   3.853687376393119*^9}, {3.853687458159233*^9, 3.8536874646017847`*^9}, {
   3.8536875403815813`*^9, 3.8536875492884417`*^9}, {3.8536875910526743`*^9, 
   3.8536876302615995`*^9}, {3.8536877038157425`*^9, 3.853687754619714*^9}, {
   3.8536878291506057`*^9, 3.8536878572077255`*^9}, {3.853687913330285*^9, 
   3.8536879239205446`*^9}, {3.8536879865005164`*^9, 
   3.8536879905911665`*^9}, {3.8536883901195827`*^9, 3.85368839567119*^9}, {
   3.853689190596166*^9, 3.853689232583819*^9}, {3.8536894770596175`*^9, 
   3.853689483223082*^9}, 3.8536896925001993`*^9, {3.8536898261139216`*^9, 
   3.8536898394301186`*^9}, 3.8536898930090055`*^9, {3.8536899401283617`*^9, 
   3.8536899633403463`*^9}, {3.8536900239327917`*^9, 
   3.8536900279264774`*^9}, {3.853690196822608*^9, 3.853690208054391*^9}, {
   3.853744601066245*^9, 3.8537446087737036`*^9}, {3.853744642975876*^9, 
   3.8537446477028894`*^9}, {3.853745034621273*^9, 3.8537450746374063`*^9}, {
   3.853745585244777*^9, 3.8537456262082605`*^9}, {3.853745682466092*^9, 
   3.8537457513190527`*^9}, {3.8537457971758027`*^9, 3.8537458264377317`*^9}, 
   3.853745880454829*^9, {3.8537459414429183`*^9, 3.853745975899005*^9}, {
   3.853746041525878*^9, 3.8537460474377213`*^9}, {3.853746105877398*^9, 
   3.8537461098580093`*^9}, {3.8537462925433846`*^9, 
   3.8537462968037004`*^9}, {3.8537463294723773`*^9, 3.853746350051877*^9}, {
   3.8537463996717577`*^9, 3.853746415089624*^9}, {3.853746652892702*^9, 
   3.8537466561476994`*^9}, {3.8537469414430532`*^9, 
   3.8537469475015993`*^9}, {3.8537473543699718`*^9, 
   3.8537473819144154`*^9}, {3.8537474447183924`*^9, 3.8537474728732557`*^9}, 
   3.85390828089022*^9, 3.853908359662081*^9, {3.8539084052719555`*^9, 
   3.8539084447689524`*^9}, 3.853908497155998*^9, 3.8539086803879313`*^9, 
   3.85390873756079*^9, 3.8539087704628563`*^9, {3.853908849617343*^9, 
   3.853908855262344*^9}, {3.8539089503473825`*^9, 3.853908975363974*^9}, 
   3.853909010716897*^9, {3.8539090697045236`*^9, 3.8539090800847883`*^9}, 
   3.853909133073131*^9, {3.853909166797702*^9, 3.853909211151189*^9}, 
   3.85390954892276*^9, 3.85470634271537*^9, {3.8547085240780787`*^9, 
   3.8547085292860765`*^9}, {3.8547270793516088`*^9, 3.854727082825858*^9}, {
   3.8547323878279414`*^9, 3.8547324198975067`*^9}, {3.854732585741702*^9, 
   3.854732600611429*^9}, {3.854732721739297*^9, 3.8547327268283267`*^9}, {
   3.8547855239811907`*^9, 3.85478553427465*^9}, {3.854785585458517*^9, 
   3.8547855908475857`*^9}, {3.854789859341422*^9, 3.854789872044309*^9}, 
   3.854790882628419*^9, 3.854797483860984*^9, {3.854797604290041*^9, 
   3.854797671663633*^9}, {3.8547977235744753`*^9, 3.8547977763248725`*^9}, {
   3.8547978388580656`*^9, 3.8547978816231165`*^9}, {3.8547979275081015`*^9, 
   3.8547979571536283`*^9}, {3.854797993821272*^9, 3.8547980836092834`*^9}, {
   3.8547981488942814`*^9, 3.854798168658436*^9}, 3.85479822468478*^9, {
   3.8547987036472645`*^9, 3.854798734173934*^9}, {3.854798808250289*^9, 
   3.8547988112480307`*^9}, {3.8548026651186676`*^9, 
   3.8548027279906683`*^9}, {3.854802838154703*^9, 3.854802843253705*^9}, {
   3.85480293768933*^9, 3.854802941463333*^9}, {3.8548029843633327`*^9, 
   3.8548029891153316`*^9}, {3.854803035560335*^9, 3.8548030666483316`*^9}, 
   3.854808054293045*^9, 3.854808103276319*^9, {3.85480817826235*^9, 
   3.8548081951495843`*^9}, 3.85480847321404*^9, {3.8548085292726684`*^9, 
   3.8548085347955637`*^9}, {3.8548086899774504`*^9, 
   3.8548087733112946`*^9}, {3.854808843198187*^9, 3.8548088662614813`*^9}, {
   3.854808903433276*^9, 3.8548089062289686`*^9}, {3.8548091140699153`*^9, 
   3.854809118693494*^9}, 3.8548122961453094`*^9, {3.8548123480468025`*^9, 
   3.85481239305095*^9}, 3.854812424233514*^9, {3.8548124873591824`*^9, 
   3.8548125985618124`*^9}, 3.854813659102082*^9, {3.8548137492635155`*^9, 
   3.854813800630666*^9}, {3.8548138463916497`*^9, 3.8548138751527295`*^9}, {
   3.854814158497566*^9, 3.854814163149533*^9}, 3.8550503350979033`*^9, {
   3.8550512615752525`*^9, 3.8550513311499634`*^9}, {3.8550513920263414`*^9, 
   3.855051408270874*^9}, {3.855051519881768*^9, 3.8550515246474686`*^9}, {
   3.855051601371109*^9, 3.8550516288862796`*^9}, {3.8550516828346415`*^9, 
   3.8550516884397674`*^9}, {3.8550518401430783`*^9, 3.855051863504711*^9}, {
   3.8550531429354877`*^9, 3.855053182769721*^9}, {3.8550532291158857`*^9, 
   3.8550532889274616`*^9}, 3.85505356954066*^9, 3.855053713379428*^9, 
   3.8550537469260626`*^9, {3.8550540299465523`*^9, 3.855054039372212*^9}, {
   3.8550578642273893`*^9, 3.855057894586117*^9}, {3.8550579609179997`*^9, 
   3.8550579707579365`*^9}, 3.8550580458377094`*^9, {3.8550592885670843`*^9, 
   3.8550593048882008`*^9}, 3.8550597436580367`*^9, {3.855059777873791*^9, 
   3.8550597933136005`*^9}, {3.8550598239604096`*^9, 3.855059844576621*^9}, {
   3.8550598805044146`*^9, 3.8550598899584427`*^9}, 3.8550605223560123`*^9, 
   3.855062373255126*^9, {3.8550624078896*^9, 3.8550624221450586`*^9}, {
   3.855062499769661*^9, 3.855062568404765*^9}, 3.855062604956747*^9, {
   3.855062676062503*^9, 3.8550626922885714`*^9}, 3.855062880158515*^9, 
   3.855062927241691*^9, 3.8550629783007812`*^9, 3.85531338873242*^9, {
   3.855313766678924*^9, 3.85531379633098*^9}, 3.8553139872194023`*^9, {
   3.855314023730953*^9, 3.855314046855405*^9}, 3.855314098001836*^9, 
   3.8553149517738485`*^9, {3.855648617141946*^9, 3.8556486224312377`*^9}, 
   3.8556487306268773`*^9, 3.855648793013466*^9, 3.8577971388688555`*^9, {
   3.857797318941421*^9, 3.857797342446266*^9}, 3.857798165386482*^9, 
   3.857798856484605*^9, 3.8583070725061135`*^9, 3.8583072201652665`*^9, 
   3.858401722679477*^9},
 CellLabel->
  "Out[424]=",ExpressionUUID->"509a3915-63f0-4641-9598-065365111584"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArcCosh", "[", 
   RowBox[{"5", "/", "4"}], "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.85505521725918*^9, 3.855055226350608*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"cfacf82f-c6b1-463b-86ff-13f6b175f6fa"],

Cell[BoxData[
 RowBox[{"Log", "[", "2", "]"}]], "Output",
 CellChangeTimes->{3.855055226693388*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"e281f1a4-acb6-40dc-abc3-50ba2e461962"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cT001", "[", 
   RowBox[{"0.1", ",", "0", ",", "0", ",", "4"}], "]"}], "+", 
  RowBox[{"cT0L1", "[", 
   RowBox[{"0.1", ",", "0", ",", "0", ",", "4"}], "]"}], "+", "1", "-", 
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "4"}], " ", 
         RowBox[{"ArcSinh", "[", ".1", "]"}]}], "]"}], "+", "1"}], ")"}], 
     RowBox[{
      RowBox[{"Sqrt", "[", 
       RowBox[{"1", "+", 
        RowBox[{".1", "^", "2"}]}], "]"}], "/", "2"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.854803428104273*^9, 3.854803532681168*^9}, {
  3.854803569033169*^9, 3.8548035890721645`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ed8b2e87-136b-4388-8c4a-c6eb3d2fd59b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.008681973613416188`"}], "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{{3.854803500284286*^9, 3.8548035107568307`*^9}, {
   3.854803578255165*^9, 3.85480358957917*^9}, 3.855050336211419*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"39fb340f-ed53-4d3e-bc46-13661d0bf61b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListLogPlot", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Re", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"cP001", "[", 
               RowBox[{"m", ",", 
                RowBox[{"Exp", "[", 
                 RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}], "+", 
              RowBox[{"cP0L1", "[", 
               RowBox[{"m", ",", 
                RowBox[{"Exp", "[", 
                 RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}]}], ")"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"cP003", "[", 
               RowBox[{"m", ",", 
                RowBox[{"Exp", "[", 
                 RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}], "+", 
              RowBox[{"cP0L3", "[", 
               RowBox[{"m", ",", 
                RowBox[{"Exp", "[", 
                 RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}]}], ")"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{
                RowBox[{"Cos", "[", "p0", "]"}], "/", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"1", "+", 
                  RowBox[{"m", "^", "2"}]}], "]"}]}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"m", "+", 
               RowBox[{"I", " ", 
                RowBox[{"Sin", "[", "p0", "]"}]}]}], ")"}]}]}], "}"}], "]"}], 
         "/.", 
         RowBox[{"p0", "\[Rule]", 
          RowBox[{"2", "Pi", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"n", "+", 
              RowBox[{"1", "/", "2"}]}], ")"}], "/", "Lt"}]}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "0", ",", 
          RowBox[{"Lt", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"C", "[", "h", "]"}], ",", 
          RowBox[{"C", "[", "3", "]"}], ",", 
          RowBox[{"C", "[", "0", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Center", ",", "Top"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"Frame", "\[Rule]", "True"}], ",", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"t", ",", "\"\<Re[C(t)]\>\""}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "0.05"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Lt", ",", "20"}], "}"}], ",", "2", ",", "60", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Ls", ",", "20"}], "}"}], ",", "1", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Epsilon]", ",", ".2"}], "}"}], ",", "0", ",", "1"}], "}"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8531599099451733`*^9, 3.8531599366223536`*^9}, {
   3.8531600005868683`*^9, 3.8531600386778054`*^9}, {3.853160098906339*^9, 
   3.8531601826830106`*^9}, {3.8531605598751373`*^9, 
   3.8531606319969673`*^9}, {3.8531607643824825`*^9, 3.8531607653496*^9}, 
   3.8531609301194725`*^9, {3.8531610256236973`*^9, 3.853161026910263*^9}, {
   3.8531610607905083`*^9, 3.8531610613423433`*^9}, {3.853161171566023*^9, 
   3.8531611815029216`*^9}, {3.8531613532373133`*^9, 
   3.8531613857406673`*^9}, {3.853161422905451*^9, 3.8531614323594365`*^9}, {
   3.8531615528732157`*^9, 3.853161581860729*^9}, 3.853161691620407*^9, {
   3.853161727099635*^9, 3.853161738813038*^9}, {3.8531618825819616`*^9, 
   3.8531618833897376`*^9}, {3.8531620556559734`*^9, 3.853162056690858*^9}, {
   3.853162104113628*^9, 3.8531621110414963`*^9}, {3.8531621529987316`*^9, 
   3.8531621592466345`*^9}, {3.8532290676039176`*^9, 
   3.8532290882051105`*^9}, {3.8532291664526095`*^9, 
   3.8532291673380065`*^9}, {3.853229235486898*^9, 3.85322926920555*^9}, {
   3.853229515431531*^9, 3.8532295200567336`*^9}, {3.8532295693696327`*^9, 
   3.853229569669893*^9}, {3.8532301029315796`*^9, 3.853230103069422*^9}, {
   3.853230243821681*^9, 3.8532302620898867`*^9}, {3.853230364492304*^9, 
   3.853230438791279*^9}, {3.8532304705981092`*^9, 3.853230471499644*^9}, {
   3.8532305134084444`*^9, 3.8532305733974385`*^9}, {3.853237975537938*^9, 
   3.8532379758261833`*^9}, {3.8532381211358156`*^9, 
   3.8532381251999793`*^9}, {3.8532381859058046`*^9, 
   3.8532381944741664`*^9}, {3.853238224785236*^9, 3.853238228240061*^9}, {
   3.8532382929158735`*^9, 3.853238296384388*^9}, {3.8532383345795546`*^9, 
   3.853238338042133*^9}, {3.853238617296594*^9, 3.853238621071262*^9}, {
   3.8532387050206747`*^9, 3.8532387195620193`*^9}, {3.853238767233185*^9, 
   3.853238791384282*^9}, {3.853238918958671*^9, 3.853238923231606*^9}, {
   3.8532391161001625`*^9, 3.853239228778452*^9}, {3.853239289209361*^9, 
   3.8532395821743097`*^9}, {3.853239652166733*^9, 3.8532396942393627`*^9}, {
   3.853239738517455*^9, 3.853239799818989*^9}, 3.853239924751983*^9, {
   3.8532399571429567`*^9, 3.8532399582871375`*^9}, {3.853240188416664*^9, 
   3.8532402399736123`*^9}, {3.8534768543262005`*^9, 
   3.8534768675353355`*^9}, {3.853582056277481*^9, 3.85358210820378*^9}, {
   3.853582153185946*^9, 3.8535822025191393`*^9}, {3.8536870979069095`*^9, 
   3.8536871019733973`*^9}, {3.853687138428586*^9, 3.853687143241025*^9}, {
   3.8536872413736277`*^9, 3.8536872609442396`*^9}, {3.853687302833965*^9, 
   3.853687367475554*^9}, 3.8536874570386543`*^9, {3.8536875327973404`*^9, 
   3.853687538145853*^9}, {3.853687577281616*^9, 3.853687609809808*^9}, {
   3.853687709897353*^9, 3.8536877376332197`*^9}, {3.8536878216352887`*^9, 
   3.8536878472912025`*^9}, {3.8536879172745533`*^9, 
   3.8536879226475763`*^9}, {3.853687984130516*^9, 3.8536879850355344`*^9}, {
   3.8536883762409353`*^9, 3.8536883891447163`*^9}, {3.8536891812344913`*^9, 
   3.8536891894151115`*^9}, {3.8536892196212635`*^9, 
   3.8536892200773487`*^9}, {3.8536894352011256`*^9, 
   3.8536894756688213`*^9}, {3.853689820010272*^9, 3.8536898388091507`*^9}, {
   3.8536898721990604`*^9, 3.8536898918272886`*^9}, {3.8536899242102723`*^9, 
   3.853690004876452*^9}, {3.853690157947237*^9, 3.8536901896372595`*^9}, {
   3.8537445891253767`*^9, 3.853744598174884*^9}, {3.8537446320458174`*^9, 
   3.85374464212827*^9}, {3.85374500973412*^9, 3.853745028369569*^9}, {
   3.8537450625723906`*^9, 3.853745066502257*^9}, {3.853745552410989*^9, 
   3.853745649616069*^9}, 3.853745680054994*^9, {3.853745719108817*^9, 
   3.853745745798215*^9}, {3.8537457938582582`*^9, 3.8537458205668144`*^9}, {
   3.8537458514309454`*^9, 3.8537458793522053`*^9}, {3.8537459260039673`*^9, 
   3.8537459634390144`*^9}, {3.853745996809063*^9, 3.853746040508479*^9}, {
   3.8537462772831545`*^9, 3.853746290426011*^9}, {3.853746323895973*^9, 
   3.8537463283794436`*^9}, {3.8537463959759407`*^9, 3.853746407278967*^9}, {
   3.85374662157484*^9, 3.8537466416633167`*^9}, {3.8537469155704255`*^9, 
   3.853746940044613*^9}, {3.8537473524584875`*^9, 3.8537473749316473`*^9}, {
   3.8537474414925804`*^9, 3.853747463585397*^9}, {3.8539083830865927`*^9, 
   3.853908397141574*^9}, {3.853908437990876*^9, 3.853908464135228*^9}, {
   3.8539086395782948`*^9, 3.8539086438976035`*^9}, {3.8539087239991484`*^9, 
   3.8539087281383915`*^9}, {3.8539088428756723`*^9, 
   3.8539088461260133`*^9}, {3.8539089392692366`*^9, 3.853908974989146*^9}, 
   3.853909009711687*^9, {3.8539090466838684`*^9, 3.8539091129822173`*^9}, {
   3.8539091658013444`*^9, 3.853909195144263*^9}, 3.8539095477897263`*^9, {
   3.8547065266835666`*^9, 3.854706622239628*^9}, {3.854709019963087*^9, 
   3.8547090319217033`*^9}, {3.854771597884983*^9, 3.854771636940797*^9}, {
   3.8547717267588663`*^9, 3.854771793700566*^9}, {3.8547719735043864`*^9, 
   3.8547720204137707`*^9}, {3.8547720688336744`*^9, 3.854772070350741*^9}, {
   3.854772121195709*^9, 3.854772175331129*^9}, {3.854772225556175*^9, 
   3.8547722289701056`*^9}, {3.854772422665155*^9, 3.8547724496742754`*^9}, {
   3.8547725022921395`*^9, 3.8547726292691298`*^9}, {3.854772742564986*^9, 
   3.8547727573351364`*^9}, {3.854772797053121*^9, 3.8547727992229815`*^9}, {
   3.8547728401606293`*^9, 3.8547729487806096`*^9}, {3.854772994273777*^9, 
   3.854773053707593*^9}, {3.8547730992180996`*^9, 3.8547731392267246`*^9}, {
   3.854773209215272*^9, 3.8547732142611313`*^9}, {3.8547732650345793`*^9, 
   3.8547732820910373`*^9}, {3.8547733548918533`*^9, 
   3.8547733557163296`*^9}, {3.8547734550423584`*^9, 3.854773660261347*^9}, {
   3.854773700024561*^9, 3.854773750688655*^9}, {3.8547738246021676`*^9, 
   3.8547738537904153`*^9}, {3.8547740505899525`*^9, 3.85477427257753*^9}, {
   3.854774318836531*^9, 3.854774330152835*^9}, {3.85477437130424*^9, 
   3.8547744385985765`*^9}, {3.854774469307844*^9, 3.8547744695743294`*^9}, {
   3.854774503806658*^9, 3.8547745129181156`*^9}, {3.8547747818848705`*^9, 
   3.8547747853056316`*^9}, {3.854774818027217*^9, 3.854774852000808*^9}, {
   3.854774905408074*^9, 3.854774907076749*^9}, {3.854774952150015*^9, 
   3.8547749523330507`*^9}, {3.8547751507341423`*^9, 3.854775159049195*^9}, {
   3.8547752617751055`*^9, 3.8547752620604925`*^9}, {3.8547753131336355`*^9, 
   3.8547753297963543`*^9}, {3.854780208292143*^9, 3.854780322353114*^9}, {
   3.8547832256994877`*^9, 3.8547832730678616`*^9}, {3.8547833153703403`*^9, 
   3.854783367504124*^9}, {3.8547833992496223`*^9, 3.8547834877220154`*^9}, {
   3.854783518982732*^9, 3.8547835438075666`*^9}, {3.854783576202508*^9, 
   3.8547835770101795`*^9}, {3.8547840443819714`*^9, 3.854784079773134*^9}, {
   3.854785666227917*^9, 3.854785680454071*^9}, {3.8547857940817814`*^9, 
   3.8547858212455606`*^9}, {3.8547858926066246`*^9, 3.854785892725117*^9}, {
   3.854789088154841*^9, 3.854789088622792*^9}, {3.854789271986951*^9, 
   3.8547893291978927`*^9}, {3.8547893614733105`*^9, 3.854789468123718*^9}, 
   3.8547895269974375`*^9, {3.8547895646028776`*^9, 3.8547896546419*^9}, 
   3.854789690492792*^9, {3.8547897339921255`*^9, 3.8547897384299955`*^9}, {
   3.8547898135360155`*^9, 3.8547898252559214`*^9}, {3.8547899226576133`*^9, 
   3.8547899228990784`*^9}, {3.854789968930433*^9, 3.8547900023052297`*^9}, {
   3.8547900780553837`*^9, 3.8547900817045965`*^9}, {3.8547902386252832`*^9, 
   3.8547902725506268`*^9}, {3.854790316225299*^9, 3.8547903363263245`*^9}, {
   3.854790426759737*^9, 3.8547904936668406`*^9}, {3.854790533932708*^9, 
   3.854790534095842*^9}, {3.8547906214194098`*^9, 3.854790625963563*^9}, 
   3.854797576266876*^9, 3.854798904671827*^9, 3.854802018885642*^9, {
   3.8577972141979628`*^9, 3.8577972180849795`*^9}, 3.858235162414386*^9, {
   3.8582352222606735`*^9, 3.858235230238345*^9}, {3.8582352920674324`*^9, 
   3.858235377813801*^9}, {3.858235427736924*^9, 3.85823551132603*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"28fdd3cf-22ac-4b54-9b58-fe5039325872"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`Ls$$ = 20, $CellContext`Lt$$ = 
    20, $CellContext`m$$ = 0.05, $CellContext`\[Epsilon]$$ = 0.2, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 0.05}, 0, 1}, {{
       Hold[$CellContext`Lt$$], 20}, 2, 60, 1}, {{
       Hold[$CellContext`Ls$$], 20}, 1, 100}, {{
       Hold[$CellContext`\[Epsilon]$$], 0.2}, 0, 1}}, Typeset`size$$ = {
    360., {110., 115.7266044899672}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`Ls$$ = 20, $CellContext`Lt$$ = 
        20, $CellContext`m$$ = 0.05, $CellContext`\[Epsilon]$$ = 0.2}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListLogPlot[
        Transpose[
         Table[
          ReplaceAll[
           Re[{$CellContext`cP001[$CellContext`m$$, 
               
               Exp[-$CellContext`Ls$$], $CellContext`p0] + \
$CellContext`cP0L1[$CellContext`m$$, 
               
               Exp[-$CellContext`Ls$$], $CellContext`p0], \
$CellContext`cP003[$CellContext`m$$, 
               
               Exp[-$CellContext`Ls$$], $CellContext`p0] + \
$CellContext`cP0L3[$CellContext`m$$, 
               Exp[-$CellContext`Ls$$], $CellContext`p0], (1 + 
              Cos[$CellContext`p0]/Sqrt[
               1 + $CellContext`m$$^2])/($CellContext`m$$ + 
             I Sin[$CellContext`p0])}], $CellContext`p0 -> 
           2 Pi (($CellContext`n + 1/2)/$CellContext`Lt$$)], {$CellContext`n, 
           0, $CellContext`Lt$$ - 1}]], PlotLegends -> Placed[{
           C[$CellContext`h], 
           C[3], 
           C[0]}, {Center, Top}], Frame -> True, 
        FrameLabel -> {$CellContext`t, "Re[C(t)]"}], 
      "Specifications" :> {{{$CellContext`m$$, 0.05}, 0, 
         1}, {{$CellContext`Lt$$, 20}, 2, 60, 1}, {{$CellContext`Ls$$, 20}, 1,
          100}, {{$CellContext`\[Epsilon]$$, 0.2}, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1035., {140., 146.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.8547737522181315`*^9, 3.8547738263823404`*^9, 3.8547738740911007`*^9, {
   3.854774071756588*^9, 3.854774173436948*^9}, 3.8547742087974553`*^9, {
   3.8547742392227077`*^9, 3.8547742730259905`*^9}, {3.85477431981596*^9, 
   3.8547743307005014`*^9}, {3.8547743721143665`*^9, 3.854774379913514*^9}, {
   3.854774428770492*^9, 3.8547744391945734`*^9}, {3.8547744702757387`*^9, 
   3.8547745158144855`*^9}, 3.8547745466262693`*^9, 3.854774786265154*^9, 
   3.854774887800427*^9, {3.854780211906721*^9, 3.854780323110304*^9}, {
   3.854783226426181*^9, 3.854783273919944*^9}, {3.8547833164084544`*^9, 
   3.8547833259640083`*^9}, {3.854783375574537*^9, 3.854783417454197*^9}, 
   3.854783454393093*^9, 3.854783488835521*^9, {3.854783520326717*^9, 
   3.8547835447700577`*^9}, 3.8547835778121324`*^9, {3.8547856712468185`*^9, 
   3.8547856817853985`*^9}, {3.8547857992213264`*^9, 3.8547858220696344`*^9}, 
   3.854785894442294*^9, 3.8547890899403715`*^9, {3.8547892792763424`*^9, 
   3.854789330330228*^9}, {3.854789364215807*^9, 3.8547894689078407`*^9}, {
   3.8547895659682755`*^9, 3.8547896555034037`*^9}, 3.854789691445256*^9, {
   3.854789738991595*^9, 3.8547897684224076`*^9}, {3.854789816083228*^9, 
   3.8547898256063304`*^9}, {3.8547899245772424`*^9, 3.854789939494337*^9}, {
   3.8547899828748455`*^9, 3.8547900025734243`*^9}, 3.8547900826703963`*^9, 
   3.854790186101014*^9, {3.854790240223078*^9, 3.854790273306676*^9}, {
   3.854790317252122*^9, 3.8547903368026237`*^9}, {3.854790427690014*^9, 
   3.8547904943473926`*^9}, 3.8547905349770527`*^9, 3.8547906266522593`*^9, {
   3.854797548570218*^9, 3.8547975780008326`*^9}, 3.854798905901616*^9, 
   3.854802019783643*^9, 3.855050336311421*^9, 3.8577972185880337`*^9, {
   3.858235367793028*^9, 3.8582353791059265`*^9}, {3.8582354311395817`*^9, 
   3.8582355119100137`*^9}},
 CellLabel->
  "Out[432]=",ExpressionUUID->"e593395a-cb5f-4133-9569-96ec15783d74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sinh", "[", "1", "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.85478572353708*^9, 3.8547857305183764`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"abfa907a-6931-41ea-9bb3-aeece962f4d9"],

Cell[BoxData["1.1752011936438014`"], "Output",
 CellChangeTimes->{{3.854785726348357*^9, 3.8547857314178505`*^9}, 
   3.8550503365607367`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"5742dd03-da4c-4a56-9001-2e335e0d06e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"cP001", "[", 
      RowBox[{"m", ",", "x", ",", "p0"}], "]"}], "+", 
     RowBox[{"cP0L1", "[", 
      RowBox[{"m", ",", "x", ",", "p0"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"p0", ",", "0", ",", "10"}], "}"}]}], "]"}], "//", 
  "Simplify"}]], "Input",
 CellChangeTimes->{{3.8547066537326784`*^9, 3.8547066938840785`*^9}, {
  3.8547067770731626`*^9, 3.854706778222888*^9}, {3.854706819408888*^9, 
  3.8547068238258905`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"19cacceb-ca30-4ca4-8995-0066cc3686b4"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.8547067115920763`*^9, 3.854706803302889*^9, 
  3.8547075258429823`*^9, 3.85505044251869*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"2245a570-a74c-4fb5-80f1-67b305b6b97c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"1", "+", 
       RowBox[{"m", "^", "2"}]}], "]"}]}], ")"}], "/", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"1", "+", 
     RowBox[{"m", "^", "2"}]}], "]"}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.854784413928197*^9, 3.8547844416450872`*^9}, {
  3.854785357213662*^9, 3.854785383024068*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"5d26ee3d-8dc6-484e-8675-87f8f53a5efa"],

Cell[BoxData[
 RowBox[{"1", "+", 
  FractionBox["1", 
   SqrtBox[
    RowBox[{"1", "+", 
     SuperscriptBox["m", "2"]}]]]}]], "Output",
 CellChangeTimes->{3.8547853835332823`*^9},
 CellLabel->
  "Out[398]=",ExpressionUUID->"ad6adc2c-1318-40a6-a306-68ffb67c9d7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], ",", 
   RowBox[{
    RowBox[{"Series", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"cP001", "[", 
           RowBox[{"m", ",", "0", ",", "p0"}], "]"}], "+", 
          RowBox[{"cP0L1", "[", 
           RowBox[{"m", ",", "0", ",", "p0"}], "]"}]}], ")"}], "/.", 
        RowBox[{"ArcCosh", "\[Rule]", 
         RowBox[{"Function", "[", 
          RowBox[{"x", ",", 
           RowBox[{"Log", "[", 
            RowBox[{"x", "+", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], 
          "]"}]}]}], "//", "Simplify"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", "0"}], "}"}]}], "]"}], "//", 
    "Simplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.854707544230983*^9, 3.8547075456990147`*^9}, {
   3.8547075881646533`*^9, 3.8547075969366493`*^9}, {3.854707639144227*^9, 
   3.854707653724779*^9}, {3.8547076899857745`*^9, 3.8547077017697773`*^9}, {
   3.854707874226372*^9, 3.854707874559374*^9}, {3.854707955299528*^9, 
   3.854707957199526*^9}, {3.8547091127871227`*^9, 3.8547091227838173`*^9}, {
   3.8547267739868107`*^9, 3.854726782333443*^9}, {3.8547268608402395`*^9, 
   3.854726862421553*^9}, {3.8547269229547496`*^9, 3.854726929687991*^9}, {
   3.8547272265485673`*^9, 3.8547272284008226`*^9}, {3.8547280776799474`*^9, 
   3.8547280875621266`*^9}, {3.8547986323126163`*^9, 3.854798647179346*^9}, 
   3.8547989631290526`*^9, 3.854799009572962*^9, {3.854799505857851*^9, 
   3.8547995591430006`*^9}, {3.8547996082638187`*^9, 3.85479961251167*^9}, {
   3.8547997060895643`*^9, 3.854799725091004*^9}, {3.8548002675368404`*^9, 
   3.85480027419825*^9}, {3.8548003130146723`*^9, 3.8548003511685705`*^9}, 
   3.8548004269933586`*^9, {3.854800572920781*^9, 3.8548005870149183`*^9}},
 CellLabel->
  "In[601]:=",ExpressionUUID->"d07e2325-3278-4de3-a094-fc044163709d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "5"}], "-", 
       RowBox[{"3", " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"2", "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
     RowBox[{"Cot", "[", 
      FractionBox["p0", "2"], "]"}]}], 
    RowBox[{
     SqrtBox[
      RowBox[{"5", "-", 
       RowBox[{"4", " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
     RowBox[{"(", 
      RowBox[{"2", "+", 
       SqrtBox[
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
       RowBox[{"Cos", "[", "p0", "]"}]}], ")"}]}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "m", "]"}], "1"],
    SeriesData[$CellContext`m, 0, {}, 0, 1, 1],
    Editable->False]}],
  SeriesData[$CellContext`m, 0, {
   Complex[0, 1] (5 - 4 Cos[$CellContext`p0])^
     Rational[-1, 2] (2 + (5 - 4 Cos[$CellContext`p0])^Rational[1, 2] - 
      Cos[$CellContext`p0])^(-1) (-5 - 
     3 (5 - 4 Cos[$CellContext`p0])^Rational[1, 2] + 
     2 (2 + (5 - 4 Cos[$CellContext`p0])^Rational[1, 2]) Cos[$CellContext`p0])
      Cot[Rational[1, 2] $CellContext`p0]}, 0, 1, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.8547075705699787`*^9, 3.854707610565652*^9, 
  3.854707662582778*^9, 3.854707709514774*^9, 3.854707884053377*^9, 
  3.8547079657035303`*^9, 3.854709137066814*^9, 3.854726799399871*^9, 
  3.854726940246755*^9, 3.8547272359562807`*^9, 3.8547280987824397`*^9, 
  3.854798683414057*^9, 3.854798869553836*^9, 3.8547989882053757`*^9, 
  3.854799054226535*^9, 3.8547995992796383`*^9, 3.854799647853919*^9, 
  3.8548000068588123`*^9, 3.8548002829832506`*^9, 3.8548003144425626`*^9, 
  3.8548003603005705`*^9, 3.854800428463356*^9, 3.854800591083918*^9},
 CellLabel->
  "Out[601]=",ExpressionUUID->"e2b6596f-69d3-47dc-8462-27f2fb91a075"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"p0", "/", "2"}], "]"}], ">", "0"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cP003", "[", 
       RowBox[{"m", ",", "0", ",", "p0"}], "]"}], "+", 
      RowBox[{"cP0L3", "[", 
       RowBox[{"m", ",", "0", ",", "p0"}], "]"}]}], "/.", 
     RowBox[{"ArcCosh", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{"x", ",", 
        RowBox[{"Log", "[", 
         RowBox[{"x", "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], "]"}]}]}], 
    "//", "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
  3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
  3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
  3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548800635665526`*^9, 
  3.854880080770243*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"2783c5de-079b-441c-9b25-13a408ecae75"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SqrtBox[
    RowBox[{"5", "-", 
     RowBox[{"4", " ", 
      RowBox[{"Cos", "[", "p0", "]"}]}]}]], "+", 
   RowBox[{"2", " ", 
    RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
   RowBox[{"2", " ", "\[ImaginaryI]", " ", "m", " ", 
    RowBox[{"Sin", "[", "p0", "]"}]}]}], 
  RowBox[{
   RowBox[{"-", "m"}], "+", 
   RowBox[{"2", " ", "m", " ", 
    RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["m", "2"]}], ")"}], " ", 
    RowBox[{"Sin", "[", "p0", "]"}]}]}]]], "Output",
 CellChangeTimes->{{3.8548000199645247`*^9, 3.8548000337010856`*^9}, {
   3.85480009404099*^9, 3.854800102691928*^9}, 3.8548002585127425`*^9, 
   3.8548006250405445`*^9, 3.854801123986706*^9, 3.854801207690801*^9, 
   3.854880087566107*^9, 3.857797242346656*^9, 3.8577982113041887`*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"cdb7b73d-f852-41c7-be4c-36c54651a6a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cP001", "[", 
       RowBox[{"m", ",", "0", ",", "p0"}], "]"}], "+", 
      RowBox[{"cP0L1", "[", 
       RowBox[{"m", ",", "0", ",", "p0"}], "]"}]}], "/.", 
     RowBox[{"ArcCosh", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{"x", ",", 
        RowBox[{"Log", "[", 
         RowBox[{"x", "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], "]"}]}]}], 
    "//", "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
  3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
  3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
  3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548786250500727`*^9, 
  3.854878628698539*^9}, {3.854878850635932*^9, 3.854878857193489*^9}, {
  3.8548799885745726`*^9, 3.854880000189163*^9}, {3.854881142712324*^9, 
  3.854881146807727*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"6ef2dd52-759b-4773-90e7-f736e7989c17"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SqrtBox[
    RowBox[{"5", "-", 
     RowBox[{"4", " ", 
      RowBox[{"Cos", "[", "p0", "]"}]}]}]], "+", 
   RowBox[{"2", " ", 
    RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
   RowBox[{"2", " ", "\[ImaginaryI]", " ", "m", " ", 
    RowBox[{"Sin", "[", "p0", "]"}]}]}], 
  RowBox[{
   RowBox[{"-", "m"}], "+", 
   RowBox[{"2", " ", "m", " ", 
    RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["m", "2"]}], ")"}], " ", 
    RowBox[{"Sin", "[", "p0", "]"}]}]}]]], "Output",
 CellChangeTimes->{
  3.8548786225121465`*^9, 3.8548788466829844`*^9, {3.8548799802347307`*^9, 
   3.8548800036690187`*^9}, 3.85488115101651*^9, 3.855050520056094*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"10409b07-1bda-4e29-935f-fa7c40631752"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}], "&&", 
    RowBox[{"Ls", ">", "0"}]}], ",", 
   RowBox[{
    RowBox[{"Series", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"cP001", "[", 
         RowBox[{"m", ",", 
          RowBox[{"Exp", "[", 
           RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}], "+", 
        RowBox[{"cP0L1", "[", 
         RowBox[{"m", ",", 
          RowBox[{"Exp", "[", 
           RowBox[{"-", "Ls"}], "]"}], ",", "p0"}], "]"}]}], "/.", 
       RowBox[{"ArcCosh", "\[Rule]", 
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{"Log", "[", 
           RowBox[{"x", "+", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], 
         "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"Ls", ",", "Infinity", ",", "2"}], "}"}]}], "]"}], "//", 
    "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
  3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
  3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
  3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548786250500727`*^9, 
  3.854878628698539*^9}, {3.854878850635932*^9, 3.854878857193489*^9}, {
  3.8548799885745726`*^9, 3.854880000189163*^9}, {3.854881142712324*^9, 
  3.854881146807727*^9}, {3.8582360319940042`*^9, 3.8582361071413937`*^9}},
 CellLabel->
  "In[433]:=",ExpressionUUID->"dc2e2e23-f770-41b8-b514-eb55a33521b7"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "m", " ", 
         RowBox[{"(", 
          RowBox[{"5", "+", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", "Ls"}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-1}, -1, 3, 1],
           Editable->False]], " ", 
         RowBox[{"(", 
          RowBox[{"56", "+", 
           RowBox[{"19", " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "-", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", "m", " ", 
         RowBox[{"(", 
          RowBox[{"97", "+", 
           RowBox[{"35", " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"m", " ", 
            RowBox[{"(", 
             RowBox[{"10", "-", 
              RowBox[{"3", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "+", 
           RowBox[{"4", " ", 
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", "Ls"}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-1}, -1, 3, 1],
              Editable->False]], " ", 
            RowBox[{"(", 
             RowBox[{"37", "+", 
              RowBox[{"11", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", 
                RowBox[{"2", " ", "Ls"}]}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-2}, -1, 3, 1],
              Editable->False]], " ", "m", " ", 
            RowBox[{"(", 
             RowBox[{"138", "+", 
              RowBox[{"47", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}]}], ")"}], 
         " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "5"}], " ", "m", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", "Ls"}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-1}, -1, 3, 1],
              Editable->False]], " ", 
            RowBox[{"(", 
             RowBox[{"42", "+", 
              RowBox[{"8", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", 
                RowBox[{"2", " ", "Ls"}]}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-2}, -1, 3, 1],
              Editable->False]], " ", "m", " ", 
            RowBox[{"(", 
             RowBox[{"47", "+", 
              RowBox[{"13", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}]}], ")"}], 
         " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", 
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", "Ls"}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-1}, -1, 3, 1],
              Editable->False]]}], "-", "m"}], ")"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "-", 
        RowBox[{"m", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "+", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", "m", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"34", " ", "\[ImaginaryI]", " ", 
         RowBox[{"Sin", "[", "p0", "]"}]}], "+", 
        RowBox[{"15", " ", "\[ImaginaryI]", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", "p0", "]"}]}], "-", 
        RowBox[{"15", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", "p0", "]"}]}], "-", 
        RowBox[{"22", " ", "\[ImaginaryI]", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}], "-", 
        RowBox[{"8", " ", "\[ImaginaryI]", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"8", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"4", " ", "\[ImaginaryI]", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"\[ImaginaryI]", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "-", 
        RowBox[{"\[ImaginaryI]", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", " ", "p0"}], "]"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"3", " ", "m", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"3", " ", "p0"}], "]"}]}], "-", 
           RowBox[{"\[ImaginaryI]", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"17", " ", 
               RowBox[{"Sin", "[", "p0", "]"}]}], "-", 
              RowBox[{"11", " ", 
               RowBox[{"Sin", "[", 
                RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
              RowBox[{"2", " ", 
               RowBox[{"Sin", "[", 
                RowBox[{"3", " ", "p0"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], 
       ")"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"3", "+", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"14", "+", 
        RowBox[{"5", " ", 
         SuperscriptBox["m", "2"]}], "+", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", 
             RowBox[{"2", " ", "Ls"}]}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-2}, -1, 3, 1],
           Editable->False]], " ", 
         RowBox[{"(", 
          RowBox[{"5", "+", 
           RowBox[{
            SuperscriptBox["m", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"14", "+", 
              RowBox[{"5", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}]}], 
          ")"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          InterpretationBox[
           RowBox[{
            RowBox[{"-", "Ls"}], "+", 
            InterpretationBox[
             SuperscriptBox[
              RowBox[{"O", "[", 
               FractionBox["1", "Ls"], "]"}], "3"],
             SeriesData[$CellContext`Ls, 
              DirectedInfinity[1], {}, -1, 3, 1],
             Editable->False]}],
           SeriesData[$CellContext`Ls, 
            DirectedInfinity[1], {-1}, -1, 3, 1],
           Editable->False]], " ", "m", " ", 
         RowBox[{"(", 
          RowBox[{"19", "+", 
           RowBox[{"5", " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "+", 
        RowBox[{"5", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", 
                RowBox[{"2", " ", "Ls"}]}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-2}, -1, 3, 1],
              Editable->False]], " ", 
            RowBox[{"(", 
             RowBox[{"2", "+", 
              RowBox[{"3", " ", 
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"(", 
                RowBox[{"3", "+", 
                 SqrtBox[
                  RowBox[{"5", "-", 
                   RowBox[{"4", " ", 
                    RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
           RowBox[{
            SuperscriptBox["m", "2"], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "+", 
           RowBox[{"3", " ", 
            RowBox[{"(", 
             RowBox[{"3", "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "+", 
           RowBox[{"2", " ", 
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", "Ls"}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-1}, -1, 3, 1],
              Editable->False]], " ", "m", " ", 
            RowBox[{"(", 
             RowBox[{"11", "+", 
              RowBox[{"2", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}]}], ")"}], 
         " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"8", " ", 
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", "Ls"}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-1}, -1, 3, 1],
              Editable->False]], " ", "m"}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             InterpretationBox[
              RowBox[{
               RowBox[{"-", 
                RowBox[{"2", " ", "Ls"}]}], "+", 
               InterpretationBox[
                SuperscriptBox[
                 RowBox[{"O", "[", 
                  FractionBox["1", "Ls"], "]"}], "3"],
                SeriesData[$CellContext`Ls, 
                 DirectedInfinity[1], {}, -1, 3, 1],
                Editable->False]}],
              SeriesData[$CellContext`Ls, 
               DirectedInfinity[1], {-2}, -1, 3, 1],
              Editable->False]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"(", 
                RowBox[{"4", "+", 
                 SqrtBox[
                  RowBox[{"5", "-", 
                   RowBox[{"4", " ", 
                    RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}]}], ")"}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{3.8582362243882265`*^9},
 CellLabel->
  "Out[433]=",ExpressionUUID->"065ced74-d016-468b-8000-b4db313e18b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"m", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"p0", "/", "2"}], "]"}], ">", "0"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Series", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"cP001", "[", 
          RowBox[{"m", ",", "x", ",", "p0"}], "]"}], "+", 
         RowBox[{"cP0L1", "[", 
          RowBox[{"m", ",", "x", ",", "p0"}], "]"}]}], "/.", 
        RowBox[{"ArcCosh", "\[Rule]", 
         RowBox[{"Function", "[", 
          RowBox[{"x", ",", 
           RowBox[{"Log", "[", 
            RowBox[{"x", "+", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], 
          "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", "Normal"}], "//",
     "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
   3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
   3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
   3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548786250500727`*^9, 
   3.854878628698539*^9}, {3.854878850635932*^9, 3.854878857193489*^9}, {
   3.8548799885745726`*^9, 3.854880000189163*^9}, {3.854881142712324*^9, 
   3.854881146807727*^9}, {3.8582360319940042`*^9, 3.8582361071413937`*^9}, {
   3.858303609993014*^9, 3.858303643977098*^9}, {3.858303734700054*^9, 
   3.858303736002102*^9}, {3.858303778073493*^9, 3.8583037789064236`*^9}, {
   3.8583038094600334`*^9, 3.8583038301282372`*^9}, {3.8583038602095175`*^9, 
   3.8583038613698764`*^9}, 3.858303944270693*^9, {3.8583049693302126`*^9, 
   3.858304972524062*^9}},
 CellLabel->
  "In[441]:=",ExpressionUUID->"9b048b16-f523-41c3-a65f-c11eca96bf46"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{"5", "+", 
        RowBox[{"3", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"2", "+", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], " ", "x", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", 
            SuperscriptBox["m", "2"], " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
            RowBox[{"(", 
             RowBox[{"3", "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]], "+", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
              RowBox[{"Cos", "[", 
               RowBox[{"2", " ", "p0"}], "]"}]}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"5", "+", 
              RowBox[{"3", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
              RowBox[{"2", " ", 
               RowBox[{"(", 
                RowBox[{"2", "+", 
                 SqrtBox[
                  RowBox[{"5", "-", 
                   RowBox[{"4", " ", 
                    RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"5", "+", 
              RowBox[{"2", " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               SqrtBox[
                RowBox[{"5", "-", 
                 RowBox[{"4", " ", 
                  RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
              RowBox[{"2", " ", 
               RowBox[{"(", 
                RowBox[{"3", "-", 
                 SuperscriptBox["m", "2"], "+", 
                 SqrtBox[
                  RowBox[{"5", "-", 
                   RowBox[{"4", " ", 
                    RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox["m", "2"]}], ")"}], " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}]}]}], ")"}], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox["p0", "2"], "]"}], "2"]}], "-", 
        RowBox[{"2", " ", "\[ImaginaryI]", " ", "m", " ", "x", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"3", "+", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
            RowBox[{"2", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           RowBox[{"Cos", "[", "p0", "]"}]}], ")"}], " ", 
         RowBox[{"Sin", "[", "p0", "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"Cos", "[", "p0", "]"}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"5", "+", 
           RowBox[{"2", " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
           RowBox[{
            SuperscriptBox["m", "2"], " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"3", "-", 
              SuperscriptBox["m", "2"], "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"m", " ", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
           RowBox[{"2", " ", "m", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
           RowBox[{"m", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", "p0"}], "]"}]}], "-", 
           RowBox[{"\[ImaginaryI]", " ", 
            RowBox[{"(", 
             RowBox[{"3", "+", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
            RowBox[{"Sin", "[", "p0", "]"}]}], "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}]}]}], ")"}]}], ")"}], 
    "/", 
    RowBox[{"(", 
     RowBox[{
      SqrtBox[
       RowBox[{"5", "-", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
      RowBox[{"(", 
       RowBox[{"3", "+", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"Cos", "[", "p0", "]"}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"5", "+", 
         RowBox[{"2", " ", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
         RowBox[{
          SuperscriptBox["m", "2"], " ", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
         RowBox[{"2", " ", 
          RowBox[{"(", 
           RowBox[{"3", "-", 
            SuperscriptBox["m", "2"], "+", 
            SqrtBox[
             RowBox[{"5", "-", 
              RowBox[{"4", " ", 
               RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
          RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["m", "2"]}], ")"}], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}], "2"]}], ")"}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{
  3.858303640044594*^9, 3.85830372948929*^9, {3.858303775227682*^9, 
   3.8583037941566706`*^9}, 3.85830384555599*^9, 3.8583039401477795`*^9, 
   3.8583042058736773`*^9},
 CellLabel->
  "Out[441]=",ExpressionUUID->"782d3672-ae21-42db-b90c-137a1247ae2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"m", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"p0", "/", "2"}], "]"}], ">", "0"}]}], ",", 
   RowBox[{"Collect", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Series", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"cP001", "[", 
           RowBox[{"m", ",", "x", ",", "p0"}], "]"}], "+", 
          RowBox[{"cP0L1", "[", 
           RowBox[{"m", ",", "x", ",", "p0"}], "]"}]}], "/.", 
         RowBox[{"ArcCosh", "\[Rule]", 
          RowBox[{"Function", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Log", "[", 
             RowBox[{"x", "+", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], 
           "]"}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", "Normal"}], 
     ",", "x", ",", "FullSimplify"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
   3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
   3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
   3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548786250500727`*^9, 
   3.854878628698539*^9}, {3.854878850635932*^9, 3.854878857193489*^9}, {
   3.8548799885745726`*^9, 3.854880000189163*^9}, {3.854881142712324*^9, 
   3.854881146807727*^9}, {3.8582360319940042`*^9, 3.8582361071413937`*^9}, {
   3.858303609993014*^9, 3.858303643977098*^9}, {3.858303734700054*^9, 
   3.858303736002102*^9}, {3.858303778073493*^9, 3.8583037789064236`*^9}, {
   3.8583038094600334`*^9, 3.8583038301282372`*^9}, {3.8583038602095175`*^9, 
   3.8583038613698764`*^9}, 3.858303944270693*^9, {3.858304849852957*^9, 
   3.8583048503717675`*^9}, {3.8583049856357937`*^9, 3.858304998897191*^9}, {
   3.85830516838803*^9, 3.8583051693711767`*^9}, {3.858305434941716*^9, 
   3.8583054387486086`*^9}},
 CellLabel->
  "In[447]:=",ExpressionUUID->"813c23b4-be42-4e27-934f-37ce6df5df37"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SqrtBox[
     RowBox[{"5", "-", 
      RowBox[{"4", " ", 
       RowBox[{"Cos", "[", "p0", "]"}]}]}]], "+", 
    RowBox[{"2", " ", 
     RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
    RowBox[{"2", " ", "\[ImaginaryI]", " ", "m", " ", 
     RowBox[{"Sin", "[", "p0", "]"}]}]}], 
   RowBox[{
    RowBox[{"-", "m"}], "+", 
    RowBox[{"2", " ", "m", " ", 
     RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["m", "2"]}], ")"}], " ", 
     RowBox[{"Sin", "[", "p0", "]"}]}]}]], "-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"4", " ", "x", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "5"}], "-", 
       RowBox[{"3", " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"2", "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       FractionBox["p0", "2"], "]"}], "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "35"}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["m", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "-", 
       RowBox[{"13", " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"47", "+", 
          RowBox[{"3", " ", 
           SuperscriptBox["m", "2"]}], "+", 
          RowBox[{"16", " ", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"13", "+", 
          RowBox[{
           SuperscriptBox["m", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"5", "+", 
             SqrtBox[
              RowBox[{"5", "-", 
               RowBox[{"4", " ", 
                RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "+", 
          RowBox[{"3", " ", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "p0"}], "]"}]}], "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"3", " ", "p0"}], "]"}], "+", 
       RowBox[{"m", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"m", " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"3", " ", "p0"}], "]"}]}], "-", 
          RowBox[{"4", " ", "\[ImaginaryI]", " ", 
           RowBox[{"(", 
            RowBox[{"8", "+", 
             RowBox[{"3", " ", 
              SqrtBox[
               RowBox[{"5", "-", 
                RowBox[{"4", " ", 
                 RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
             RowBox[{"2", " ", 
              RowBox[{"(", 
               RowBox[{"4", "+", 
                SqrtBox[
                 RowBox[{"5", "-", 
                  RowBox[{"4", " ", 
                   RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
             RowBox[{"Cos", "[", 
              RowBox[{"2", " ", "p0"}], "]"}]}], ")"}], " ", 
           RowBox[{"Sin", "[", "p0", "]"}]}]}], ")"}]}]}], ")"}]}], ")"}], 
   "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"3", "+", 
       SqrtBox[
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
       RowBox[{"2", " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"Cos", "[", "p0", "]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"5", "+", 
        RowBox[{"2", " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
        RowBox[{
         SuperscriptBox["m", "2"], " ", 
         SqrtBox[
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"3", "-", 
           SuperscriptBox["m", "2"], "+", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
         RowBox[{"Cos", "[", "p0", "]"}]}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}], "2"]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{3.858304863564726*^9, 3.858305004548706*^9, 
  3.858305193031836*^9},
 CellLabel->
  "Out[447]=",ExpressionUUID->"28011744-ebe6-4496-bade-8d6e9fe97d2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "p0", "]"}], "<", "1"}], "&&", 
    RowBox[{"p0", ">", "0"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"m", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"p0", "/", "2"}], "]"}], ">", "0"}]}], ",", 
   RowBox[{"Collect", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Series", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"cP003", "[", 
           RowBox[{"m", ",", "x", ",", "p0"}], "]"}], "+", 
          RowBox[{"cP0L3", "[", 
           RowBox[{"m", ",", "x", ",", "p0"}], "]"}]}], "/.", 
         RowBox[{"ArcCosh", "\[Rule]", 
          RowBox[{"Function", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Log", "[", 
             RowBox[{"x", "+", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"x", "^", "2"}], "-", "1"}], "]"}]}], "]"}]}], 
           "]"}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", "Normal"}], 
     ",", "x", ",", "FullSimplify"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548000326250362`*^9, 3.854800042867201*^9}, {
   3.854800097472189*^9, 3.8548001167190685`*^9}, {3.854800615983924*^9, 
   3.8548006190715485`*^9}, {3.854801043214181*^9, 3.8548010476871758`*^9}, {
   3.854801155401804*^9, 3.8548011599038105`*^9}, {3.8548786250500727`*^9, 
   3.854878628698539*^9}, {3.854878850635932*^9, 3.854878857193489*^9}, {
   3.8548799885745726`*^9, 3.854880000189163*^9}, {3.854881142712324*^9, 
   3.854881146807727*^9}, {3.8582360319940042`*^9, 3.8582361071413937`*^9}, {
   3.858303609993014*^9, 3.858303643977098*^9}, {3.858303734700054*^9, 
   3.858303736002102*^9}, {3.858303778073493*^9, 3.8583037789064236`*^9}, {
   3.8583038094600334`*^9, 3.8583038301282372`*^9}, {3.8583038602095175`*^9, 
   3.8583038613698764`*^9}, 3.858303944270693*^9, {3.8583046896463423`*^9, 
   3.8583046988875866`*^9}, {3.8583050441447244`*^9, 
   3.8583050546369033`*^9}, {3.8583051378375673`*^9, 
   3.8583051389017677`*^9}, {3.858305340741125*^9, 3.8583053705889034`*^9}},
 CellLabel->
  "In[446]:=",ExpressionUUID->"bf4dc7ca-7122-45e3-b1b7-3fd224309aa2"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SqrtBox[
     RowBox[{"5", "-", 
      RowBox[{"4", " ", 
       RowBox[{"Cos", "[", "p0", "]"}]}]}]], "+", 
    RowBox[{"2", " ", 
     RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
    RowBox[{"2", " ", "\[ImaginaryI]", " ", "m", " ", 
     RowBox[{"Sin", "[", "p0", "]"}]}]}], 
   RowBox[{
    RowBox[{"-", "m"}], "+", 
    RowBox[{"2", " ", "m", " ", 
     RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["m", "2"]}], ")"}], " ", 
     RowBox[{"Sin", "[", "p0", "]"}]}]}]], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"4", " ", "x", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "5"}], "-", 
       RowBox[{"3", " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"2", "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       FractionBox["p0", "2"], "]"}], "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"5", "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["m", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"3", "+", 
             SqrtBox[
              RowBox[{"5", "-", 
               RowBox[{"4", " ", 
                RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}]}], "+", 
          RowBox[{"3", " ", 
           SqrtBox[
            RowBox[{"5", "-", 
             RowBox[{"4", " ", 
              RowBox[{"Cos", "[", "p0", "]"}]}]}]]}]}], ")"}]}], "-", 
       RowBox[{"2", " ", "\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"2", "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["m", "2"]}], "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
       RowBox[{"2", " ", "m", " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
          RowBox[{"2", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
        RowBox[{"Sin", "[", "p0", "]"}]}]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     SqrtBox[
      RowBox[{"5", "-", 
       RowBox[{"4", " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}]], " ", 
     RowBox[{"(", 
      RowBox[{"3", "+", 
       SqrtBox[
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p0", "]"}]}]}]], "-", 
       RowBox[{"2", " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"Cos", "[", "p0", "]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "5"}], "-", 
       RowBox[{"2", " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "-", 
       RowBox[{
        SuperscriptBox["m", "2"], " ", 
        SqrtBox[
         RowBox[{"5", "-", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"3", "-", 
          SuperscriptBox["m", "2"], "+", 
          SqrtBox[
           RowBox[{"5", "-", 
            RowBox[{"4", " ", 
             RowBox[{"Cos", "[", "p0", "]"}]}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p0", "]"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["m", "2"]}], ")"}], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "p0"}], "]"}]}]}], ")"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.8583047042792435`*^9, 3.8583050635518975`*^9, 
  3.858305149921973*^9},
 CellLabel->
  "Out[446]=",ExpressionUUID->"189b6920-0352-49de-a245-44fbe6de5f38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "m"}], "+", 
        RowBox[{"2", "m", " ", 
         RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"m", "^", "2"}]}], ")"}], 
         RowBox[{"Sinh", "[", "p", "]"}]}]}], ",", 
       RowBox[{"m", "+", 
        RowBox[{"Sinh", "[", "p", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.854801440541545*^9, 3.8548015344000936`*^9}, {
  3.854802307605579*^9, 3.8548023238660965`*^9}, {3.8548036575081787`*^9, 
  3.8548036584251766`*^9}},
 CellLabel->
  "In[638]:=",ExpressionUUID->"d7e29c3f-3316-40bf-a7cc-cd354ba2f6f8"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`m$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`m$$], 0, 1}}, Typeset`size$$ = {
    360., {109., 113.42013617355929`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`m$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[{-$CellContext`m$$ + (2 $CellContext`m$$) 
          Cosh[$CellContext`p] + (1 + $CellContext`m$$^2) 
          Sinh[$CellContext`p], $CellContext`m$$ + 
         Sinh[$CellContext`p]}, {$CellContext`p, -10, 10}], 
      "Specifications" :> {{$CellContext`m$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{408., {152., 158.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8548015103498383`*^9, 3.8548015377850924`*^9}, {
  3.8548023096715784`*^9, 3.8548023274560924`*^9}, {3.8548036593621883`*^9, 
  3.8548036632441797`*^9}},
 CellLabel->
  "Out[638]=",ExpressionUUID->"05c3f08e-ab5a-4d4c-be17-8ffdfa28724f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "m"}], "+", 
      RowBox[{"2", "m", " ", 
       RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"m", "^", "2"}]}], ")"}], 
       RowBox[{"Sinh", "[", "p", "]"}]}]}], "\[Equal]", "0"}], ",", "p"}], 
   "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548037626802435`*^9, 3.854803772457243*^9}, {
  3.8548038584592457`*^9, 3.854803860816247*^9}},
 CellLabel->
  "In[640]:=",ExpressionUUID->"d5146ffc-c4a8-48ee-b9c8-20c7f0585e15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     TemplateBox[{
       RowBox[{
         RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}], "+", 
         RowBox[{"Log", "[", 
           FractionBox[
            RowBox[{"m", "-", 
              SqrtBox[
               RowBox[{"1", "-", 
                 SuperscriptBox["m", "2"], "+", 
                 SuperscriptBox["m", "4"]}]]}], 
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{"1", "+", "m"}], ")"}], "2"]], "]"}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     TemplateBox[{
       RowBox[{
         RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}], "+", 
         RowBox[{"Log", "[", 
           FractionBox[
            RowBox[{"m", "+", 
              SqrtBox[
               RowBox[{"1", "-", 
                 SuperscriptBox["m", "2"], "+", 
                 SuperscriptBox["m", "4"]}]]}], 
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{"1", "+", "m"}], ")"}], "2"]], "]"}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.854803773186245*^9, 3.854803861599246*^9},
 CellLabel->
  "Out[640]=",ExpressionUUID->"45753d49-01eb-4ce6-9818-9d4a8044d29f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"m", "+", 
      RowBox[{"Sinh", "[", "p", "]"}]}], "\[Equal]", "0"}], ",", "p"}], "]"}],
   "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548075500621586`*^9, 3.8548075534191694`*^9}},
 CellLabel->
  "In[641]:=",ExpressionUUID->"a3423fa9-7147-4186-b390-5b53ba82b2f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     TemplateBox[{
       RowBox[{
         RowBox[{"-", 
           RowBox[{"ArcSinh", "[", "m", "]"}]}], "+", 
         RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     TemplateBox[{
       RowBox[{
         RowBox[{"ArcSinh", "[", "m", "]"}], "+", 
         RowBox[{"\[ImaginaryI]", " ", 
           RowBox[{"(", 
             RowBox[{"\[Pi]", "+", 
               RowBox[{"2", " ", "\[Pi]", " ", 
                 TemplateBox[{"1"}, "C"]}]}], ")"}]}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8548075547893553`*^9},
 CellLabel->
  "Out[641]=",ExpressionUUID->"37109752-5cca-46a5-aec6-51a6fe8cb929"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"m", "+", 
      RowBox[{"Sinh", "[", "p", "]"}], "+", "1", "-", 
      RowBox[{"Cosh", "[", "p", "]"}]}], "\[Equal]", "0"}], ",", "p"}], "]"}],
   "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548075500621586`*^9, 3.8548075534191694`*^9}, {
  3.8562463714379144`*^9, 3.8562463766965804`*^9}},
 CellLabel->
  "In[368]:=",ExpressionUUID->"5565f276-3bca-476a-8f2c-20b4719c1bc7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"p", "\[Rule]", 
    TemplateBox[{
      RowBox[{
        RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
          TemplateBox[{"1"}, "C"]}], "+", 
        RowBox[{"Log", "[", 
          FractionBox["1", 
           RowBox[{"1", "+", "m"}]], "]"}]}], 
      RowBox[{
        TemplateBox[{"1"}, "C"], "\[Element]", 
        TemplateBox[{}, "Integers"]}]},
     "ConditionalExpression"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8562463786987867`*^9},
 CellLabel->
  "Out[368]=",ExpressionUUID->"c08641b0-b021-44c7-93ed-b9b308206f08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"5", "-", 
        RowBox[{"4", 
         RowBox[{"Cosh", "[", "p", "]"}]}]}], "]"}], "+", 
      RowBox[{"2", 
       RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
      RowBox[{"2", "m", " ", 
       RowBox[{"Sinh", "[", "p", "]"}]}]}], "\[Equal]", "0"}], ",", "p"}], 
   "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548037626802435`*^9, 3.854803772457243*^9}, {
  3.8548038584592457`*^9, 3.854803860816247*^9}, {3.854882768688162*^9, 
  3.8548828246805573`*^9}},
 CellLabel->
  "In[715]:=",ExpressionUUID->"9ff272a1-13a8-47a5-88d0-e3bba79f95e4"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ifun", 
   "\"Inverse functions are being used by \
\\!\\(\\*RowBox[{\\\"Solve\\\"}]\\), so some solutions may not be found; use \
Reduce for complete solution information.\"", 2, 715, 263, 
   18502956614351733718, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.854882826854104*^9},
 CellLabel->
  "During evaluation of \
In[715]:=",ExpressionUUID->"68bd68fb-f7dd-463d-88ec-d9d163739f4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"-", 
      RowBox[{"ArcCosh", "[", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"2", " ", 
           SuperscriptBox["m", "2"]}], "+", 
          SqrtBox[
           RowBox[{"1", "+", 
            SuperscriptBox["m", "2"], "+", 
            SuperscriptBox["m", "6"], "+", 
            SuperscriptBox["m", "8"]}]]}], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["m", "2"]}], ")"}], "2"]]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"ArcCosh", "[", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         RowBox[{"2", " ", 
          SuperscriptBox["m", "2"]}], "+", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox["m", "2"], "+", 
           SuperscriptBox["m", "6"], "+", 
           SuperscriptBox["m", "8"]}]]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], "2"]]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"-", 
      RowBox[{"ArcCosh", "[", 
       FractionBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          SuperscriptBox["m", "2"]}], "+", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox["m", "2"], "+", 
           SuperscriptBox["m", "6"], "+", 
           SuperscriptBox["m", "8"]}]]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], "2"]], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"ArcCosh", "[", 
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], " ", 
         SuperscriptBox["m", "2"]}], "+", 
        SqrtBox[
         RowBox[{"1", "+", 
          SuperscriptBox["m", "2"], "+", 
          SuperscriptBox["m", "6"], "+", 
          SuperscriptBox["m", "8"]}]]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["m", "2"]}], ")"}], "2"]], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8548828274055977`*^9},
 CellLabel->
  "Out[715]=",ExpressionUUID->"444c02de-ce00-4728-b056-8070b779044f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"cP001", "[", 
        RowBox[{"m", ",", "x", ",", 
         RowBox[{"I", " ", "p"}]}], "]"}], "+", 
       RowBox[{"cP0L1", "[", 
        RowBox[{"m", ",", "x", ",", 
         RowBox[{"I", " ", "p"}]}], "]"}]}], "/.", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "m"}], "+", 
           RowBox[{"2", "m", " ", 
            RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"m", "^", "2"}]}], ")"}], 
            RowBox[{"Sinh", "[", "p", "]"}]}]}], "\[Equal]", "0"}], ",", 
         "p"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
     RowBox[{
      TemplateBox[{"1"},
       "C"], "\[Rule]", "0"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "0", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548828703070173`*^9, 3.8548828805442734`*^9}, {
   3.8548829924652095`*^9, 3.854883069684458*^9}, {3.8548831643396454`*^9, 
   3.8548831753324194`*^9}, {3.854883310976249*^9, 3.8548833122611876`*^9}, {
   3.854883343149469*^9, 3.854883385209638*^9}, {3.8548834796738224`*^9, 
   3.854883543966318*^9}, {3.8548836564006166`*^9, 3.8548836614063916`*^9}, {
   3.855050646042097*^9, 3.8550506646208086`*^9}, {3.8550506963099933`*^9, 
   3.8550507004711943`*^9}, 3.855050783002454*^9, {3.8550508492633786`*^9, 
   3.8550508651631966`*^9}, {3.855050915542944*^9, 3.855050997821148*^9}, {
   3.8550510286304092`*^9, 3.855051057856528*^9}, {3.855051120147564*^9, 
   3.855051134071372*^9}},ExpressionUUID->"e15a39cd-3b0e-4ab8-bd49-\
cbe2cab442c3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"(", 
    InterpretationBox[
     RowBox[{
      RowBox[{"2", " ", "x"}], "+", 
      InterpretationBox[
       SuperscriptBox[
        RowBox[{"O", "[", "x", "]"}], "2"],
       SeriesData[$CellContext`x, 0, {}, 1, 2, 1],
       Editable->False]}],
     SeriesData[$CellContext`x, 0, {2}, 1, 2, 1],
     Editable->False], ")"}], "+", 
   RowBox[{
    RowBox[{"(", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "2"],
        SeriesData[$CellContext`x, 0, {}, 0, 2, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {-2}, 0, 2, 1],
      Editable->False], ")"}], " ", "m"}], "+", 
   RowBox[{
    RowBox[{"(", 
     InterpretationBox[
      RowBox[{
       RowBox[{"2", " ", "x"}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "2"],
        SeriesData[$CellContext`x, 0, {}, 1, 2, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {2}, 1, 2, 1],
      Editable->False], ")"}], " ", 
    SuperscriptBox["m", "2"]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "m", "]"}], "3"],
    SeriesData[$CellContext`m, 0, {}, 0, 3, 1],
    Editable->False]}],
  SeriesData[$CellContext`m, 0, {
    SeriesData[$CellContext`x, 0, {2}, 1, 2, 1], 
    SeriesData[$CellContext`x, 0, {-2}, 0, 2, 1], 
    SeriesData[$CellContext`x, 0, {2}, 1, 2, 1]}, 0, 3, 1],
  Editable->False]], "Output",
 CellChangeTimes->{
  3.8548828850560255`*^9, {3.8548829965615435`*^9, 3.8548830206037226`*^9}, 
   3.854883075507205*^9, 3.8548831838562365`*^9, 3.854883313396405*^9, 
   3.854883346194482*^9, 3.854883386616976*^9, {3.8548834807227716`*^9, 
   3.8548835443902206`*^9}, 3.8548836692585983`*^9, 3.8550506665028396`*^9, 
   3.8550507777703557`*^9, {3.855050840232782*^9, 3.85505087520459*^9}, {
   3.8550509641468596`*^9, 3.855050998309966*^9}, {3.855051030570783*^9, 
   3.855051058560688*^9}, 3.8550511256563997`*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"f0684cb9-29f7-4bad-a113-1725eed6e1e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"5", "-", 
          RowBox[{"4", 
           RowBox[{"Cosh", "[", "p", "]"}]}]}], "]"}], "+", 
        RowBox[{"2", 
         RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
        RowBox[{"2", "m", " ", 
         RowBox[{"Sinh", "[", "p", "]"}]}]}], ",", 
       RowBox[{"1", "+", 
        RowBox[{"Cosh", "[", "p", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.854801655856337*^9, 3.8548016996002183`*^9}, {
  3.854801817502198*^9, 3.8548018292481956`*^9}, {3.854801890282195*^9, 
  3.8548018946801972`*^9}, {3.8548019565880256`*^9, 3.8548020022123566`*^9}, {
  3.854802505481591*^9, 3.8548025103295975`*^9}},
 CellLabel->
  "In[619]:=",ExpressionUUID->"d39dfe81-0005-406a-8b32-e77d412fbeef"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`m$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`m$$], 0, 1}}, Typeset`size$$ = {
    360., {112., 117.36698897109147`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`m$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[{-1 + Sqrt[5 - 4 Cosh[$CellContext`p]] + 
         2 Cosh[$CellContext`p] + (2 $CellContext`m$$) Sinh[$CellContext`p], 
         1 + Cosh[$CellContext`p]}, {$CellContext`p, -1, 1}], 
      "Specifications" :> {{$CellContext`m$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1035., {142., 148.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.854801701331218*^9, 3.854801709110228*^9}, {
   3.854801818728194*^9, 3.854801831265197*^9}, 3.854801895471195*^9, {
   3.8548019620540276`*^9, 3.85480200299436*^9}, 3.854802510999591*^9},
 CellLabel->
  "Out[619]=",ExpressionUUID->"3738a930-7e15-4fd4-86e2-23e56ccbf860"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"5", "-", 
        RowBox[{"4", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"1", "+", 
           RowBox[{"m", "^", "2"}]}], "]"}]}]}], "]"}], "+", 
      RowBox[{"2", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "+", 
         RowBox[{"m", "^", "2"}]}], "]"}]}], "-", 
      RowBox[{"2", 
       RowBox[{"m", "^", "2"}]}]}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"1", "+", 
        RowBox[{"m", "^", "2"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548025318485956`*^9, 3.854802604344592*^9}, {
  3.8548026391545887`*^9, 3.8548026397365932`*^9}},
 CellLabel->
  "In[622]:=",ExpressionUUID->"645dc315-8b8a-4ad5-b0e9-ab0b8adb15f9"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwd1Ac0198bB/BoSWWUBoUUKqFlNNS7LbSEEBmJUkQZoV/KCoVK+tZPyi5b
9iyKEkJkZH7N78deGVnfz//+/vece+55nfPce87zPPdesctW5005582bl0Dm
f6uqaXdlfo/WwVn6/wMLjgpZMwXlwHvWuew/7w5+FZQieAxKcbPy/7lzvbjL
HckzyBC4u5dNrFZWl/xGUBO/3KbqyBkQ9xGOpEV1seTPHf4Z4llVk5fGkgYY
0p3o+kvc615daMwwBhJstSaIta9MfvQXvIK6jlHDP8SFR4UyCoLMkNxvvXCY
eMemAx/GRM0xnDl4vJ84iNMoWiL8BqoVLMS6ibnaXcMuSN5E/vmelx3E2a1V
ZQWa1tgzaRrdQmx97oqqPuMWOpa1a9UTN2/3POoraIu1Er/vkwQRELw2X0LP
Di+H1Oe+Eavyxih9CrKHQk7Jqnzi9MEf8kOijthVmbkmidjCwCDZ09gJz6pl
OKKJN5YPyW4IvwtBtVCPEGK/+BVb1CWdITTkauhHfFw4IqLn6n2EfxtOdSd2
/hbI91nzARxM9SOdiOUUpH11GS54vkda25Q4ZNXZh48E3cH2imKTguNu2cvC
C9nu0J5lb9tKfMGjlXOTngcee6iPrSNeNn7rfk7QQ5xr7tGaR+xQHeDQL+qN
CY1W/UI2DQ2f5vTMfG/MyPFdTiWWPSY57m78CGWc+zgjiDtTMm4Jhz9GobTT
Sldi9ecN189I+qH2e7gjaTCk1TZFCxX5YbN04AVJYq75FhTr6hN4NHqWryA2
zGIn5Wk+hX2M8pPeORqrtj6V1WE8w7TtGc0XxC5cKZu9BQNwe0K4n1wQSCk/
80q2DgC7IfZsLnGVh1VPY1EAzk3dVgohFp8vHStr/wLqVjFJZsTf5iJkq6sY
WOgexz04Q/L9w5AX9fkXh/vM7FnTNNJ22jFOdvwLlsNeywJiA2uNyVv7AsF3
bN9AMHHiAG9WYXcgZB0LvLSJz3d7KV0/HoTVgi0yn6dovGp2OprGfgv7B47b
nf/SOLxeN6JFKxhdrmWZGsS9FxUXcsUHgyl7pHQLsUi/o0m8TAgeFXg/rpyk
YWWuIDGvKQSree84ChOvuJIYFbknDOJifUuCx2no6IYmDo9EgGt15vjJURpD
jZrcYUKR+B5iemsl8UMDLlONo5H4tFzdo3mERoqJlVB6QCTO3W62sybmuXnA
467iOyzZnej4bJjGV9f6i4vuvQfT5sTS/EEau+L4F63nisGN2xfPVPTSKJb9
alS2IwYWG0IrfIiNkhxynHVjsH8hR48KsW8607otJgZrdBZ3fumh0Z0f3/ju
dCxix5bMJHbTeFujkrTzeRyYC/Ni7Vk0ltIu+soiiTBfC570NlIvc20D6ROJ
cLM6uOEasXi1tBH/zURsNJQvFyQ+GF1n0vgxEeInFrDvttLIimakZch+gKjz
XNx+Jo0Bjf5ctfIP0CnjV45qoqEV9bLUZnky1ttwGCvUkfd9yfWUmVgyvBMW
DTXW0mhfYVmmI5+Max2Va12Ire4dqThwKRnVnikoqaHhfX6ganF8MtLsbRu0
q2l8nD3S8PpUCvQYFkeMKmlIqA92FzxOxb6RigqJUhpC95X3XQ1NRX/ozMr0
Ehp88SGPuTNS4Sg81naceJpLQ1a9PRXTyYfXXSmm8TM/w6ZlTxr5rrjnvy6i
4bTDhf23Kw3vnmyMHC2gUc4rICB7KAORPSZiKrk07pTvxauxLHzP3GjsH0v6
J5vWVcyVDbVCa3se4gjfHT4z67Nh93an+KMYGpWnNtcbHM/GyggOlQfRNLaV
CthIMLIx8PV5xtX3NJhFQ++SFXMwI3lIclM4DeXPkTxlTrlIeaiqeCqQxppU
/hYOjjzkX6z2NfMk/1X70R8VSl/Q0LW5uk6Hxpfrb9bp9hfCV6rQJGQTjXHJ
A7zxlkU4plslpNjHBudULN86iRJwRf70f/6ODQXaKF0j4QcYg9K1poZs/HCX
K/8mVQGLCl1x5go2RJ/2TUUP/oRXXEKjVOYc+iaZLTU7qnAuR1JLXn8OEb05
JTx+v1D+1lHQZHgWPMLvhzo7q7G971CcqPMsfMzTzELEa+FwSfUYc+ksJg7F
dl67XwemYcApXc8Z2O4qTF1d8Bsn7LIv6c6fATOh8HGlWAMqBz99m7o+jZnr
1a+3OjXig6l5OKN0CtsOL2ab5TRBrL7uUbnMFJTDxK4mrWmBDbPY3sThL+4I
G25s02eiX5FbpaJwEtL9WkvrTrfiWV61aRz3JFbyDnMVTreiVu1090e5CSzI
e524KagNlSnLjBYaj+OGXE79ErV25NrbKilZjiFW5XLIp4l2RBe3Heix/IPx
PiE+FqMDYbZuqzKsRpGmoTw/4FgngjIdPrQoj+D+SY/gVFYnXq01VpERHoZY
s+rvcI8uiARe9dydO4B9iu4BgrtYSGXP0xfI6kXtZUGFN3IsCBWy3fjje2Hj
l1C3QZEFGZWStVyhvYjr+i20RYmFNbtUtdu8eiESIBOqcIKF9v1pBUd0esE5
UhuvcZEFAxW1N2njPSiN2Vrk68rCZwsx01GpHlyr/XSN34OF89FNNzhEerCA
U5P7hScLP84Z9i/m78FBXefTQT4sDAwGcc9MdOPD4l+/YhgseMxN3rnzpRsB
V/5pLYph4aaXVF6adjf0RSqmOH6xsCXR8gHDiQKP4O20nBoWZh0ULOVuUPi8
ctUtu98sSK4KNS3UoyC5RK+7u5mFasuteVlKFIb+sGorullQXXAxb2yOBddi
dsobNgvXjp+Wv3ePhShb2Zt7pSgMjz5T4rPqwkWryq1/pCkoHC/zc7rUheXX
bbvitlMY26bOX67WhduG2fob5Cls6Kjqld3Shf2qJ9QWH6KwzOjGaAmzE+Wi
BltqtCjUdtxPHFfpxHiJb7u1C4Vpfq2alQs70LS05tqsG4VT03Yq1cPt+HJq
/ZDnQwq2j54Emze142l5zMzbxyT+xVrv5SntkKoqEih7QfI66SzCZ9AOg3oO
5a0xFN5mpdfrRrfhmJBKWWocBafskWn/Z23YpvdU41AiBWfzMDdnxzb8bRIx
0k6lkHsmou3SyTb4t+539PhEgS+q6J8vba1wEHOj+T5TCHSkhwWKWmF4ucQj
qIDENytmj8S2QrpTxz/lO8lnkWPYNttWfKPsYtuqKHR277eRnGEibsvHnZY1
xHt81PVymXhuviDzbx2Fn3mmb3rvMmHU51/I20zhQYR43M3xFpyQblB9zaTg
ELxHcCahBTKWYpWS7RT6HS+MLTNrwfRgYvMBisJ6f6lO49JmtG6fNCnuoaDD
FfEw16EZRdYHezX7KXwQLV2aJdaMhCQP69ZBClHeSV72X5sQMPpj4sYI2f8u
3i33chPu7ha4N/mHwuy/Ftu/TDbisq3efLcJChGs0R05Lo04mRbmzTNFISBI
1614pgHbJ3p4A2couJ/1S2rTa8BqxZ0MCTaFBYwoQXP3eqSuMXk/QFPI556O
1lT7jf8BB9HG/g==
       "]]},
     Annotation[#, "Charting`Private`Tag$3746951#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwl1Ak0VWsbB/B9zqZOwzWlezMlmUsnFCnV80aToTJWVK6pRJklNHB8KEIu
p5OiMheSeYjTTXXiNiBTMkviGHd1DUVx37O+vdZee/3WXmvv/f8/734VHD0t
TtIJgriDT8HV+CS/sXrYeifx/wMJGUp79UptBmlds0UCb7qXmFwstRvU3ZCU
wAOySqzzKgfhfdI7PYFN6tqK7khZQdRr4qTAStFymQvyNuA/9U7wCvTT2Omm
g4odRMns+iTwSFgLz4HjACH65jo07CPOM0/ipZyhyZLGFphnKF3+IvkUPHM0
XxBYU3FHwaS8K5id2nUefy9KpttnK6efgb3HG+cEZvSHph1W8QAtA1oMiV3Z
11T3wsoLHFc2rhPC9jJzNj7O8YaxJtQqcPfGK4YxUn6wlSAEARH73qpq5WPn
YPb0oTWLsY1Fc7b/newPKx7t/CVw2cRbHUo+ECq5P7uWYJ+1syu64hAEpy+9
6V2KvbaeYq5JvwCFjG3UMuzYPAk1c5XLUO02vUkEe49cRsawSzC81t3tKop9
uea22DOrEPhWrpUrhr1ZVyPGhsOCxGejViuwU1YeioiSCoO67Z2AC0cX6m7y
DleGwYp55Q5p7MPhfXTFY+FgvlOMJYu9fMo7uCo5AjRlX0zKYwe0sAPG5COh
1SnVVxXbMrq7rKI6Elo2D/moYzN3q0yFOURBMby9vF4wz+Jyb7n0ayDT5cvd
iG2e0OF2UCUWHorrNeABIw0TxWzp2ljwuuG/SV/QN3l2aNDlOkgsWGbswP7z
8XzhU6s4CLEezTXAXqkexzzK+QsGuFEWB7BZjGLVSCk2HFJg/XLGXrfvr6tF
XmwwqSnzOo3dFO453FnLhuTH1d/OCNYPqZHL9L8BA9vNFX2xa35lMFuaOFAW
7KgbKsj7L0dHPvoWsHU2KaVjl2qd4+z/dAvchtLD7mPbeVnOeG+7DVNXh/7N
xc4fF33M49+GvXpD8yXYFvyr2932JAOb9bKmFjuxO8iwdP4uXA0elPuCvUvW
JqPH+h7UjwaemRKsV9stwoy8e0Dc7KmdxV49FuiUtyEF/taWyROmEcjTVVeZ
6EqBV+p26rLYEs75DzL10oBrS/FNsI/apOZ/+ZoBbCWz/5VhU51WS9OkM0Gt
fkbzCXaEHeOkpWEmiHZEjL7ALnbylC5jZ4I/x/ZKI7aIx47wC1uyIJJstRnH
fhnabrvo0n1I/zbjqkonkPZD8UWyjBxYwpnTycR+xXxpX6eZA5XNJiF52PaF
AVWXbXLg28jltlLsmLJer485+L5QzMMabH51XmfWgVy46Ln7Kx/7bqtRoVbC
Q5jMmhvYSBJo2QLr+L7V+aCtdcyvFjvR9Yidxt58OHKjW60RW6lFw17cIx9G
nJ8Md2DvzG5z6nySD5y/2HET2I+zOaXlzALYqZjs87sQgcYtx7gm9QXwPWTo
ymls6wc33/j+VgQ5rqunVwrj//tEqOkphSKYCPumo4DdL+Fed1SnCExn5UI1
sD0vGTTsOFEErLVBYIgdaTHetDivCPqydh30xn7y06AjybQYHlf0VDVgK5tP
8F9cK4EIp4bWG4sIJB28b5tLaglUZG8vS8cWy0u5trS8BPxsVTMLsWcZlkzz
/hJwq/N9VIf9rrrct0evFOIz+zwWLSZQkCZr/vvnUvgeUZMVhF0vKinJROUw
UML54s4g0Pn6rZA4+RhUssfbg5fi+TFLP79iVEJP7NT6OOyMGM3oOdlKYHRG
RqVgN5qqttvtqYRZ38Puz7DXv5H0VeZUQrfe+VfkMgL11lJZRVuqILEjvjMK
e9+zTJG6IC5kOQifTFtOoD9KxHtotKegSauYnRbB+1W/4duG7c9Bx6/i1yNJ
Aj13uyNjM8YDH1kVa6YMgaZUdojmuddCQL8+X3gtgeg/csVklF/DBOOahtE6
Auku2JdZPnoLx3PVHf/RJtDbsM31NesaIN5I+ex7fQLJx43+yJ54BwWvEu76
7yXQ6ExvT6tmE3wUNkhYbY7zjVS9FoltBmRTYnj+BM4vd58aGGiBM0sU39u7
ESjatfRUitJ7CHFtcpc7T6BplDtwOrgNxIZ+N3oYTiA/bV7J7y8+gI3tmm3f
EnD+R7xrjQod0LVYpkEpg0Bzbi1J6kGdYLSDdHxZgvvatXj+VFUXHE2+7TXC
w/2kKbgU/tEDBYGBlqva8Dzk/lz78XgvqHnZShbw8X42Zr2s7UAf/OMnzwmZ
JdAK0S8M3mwfNH+/VO0jQkNCT5PyFZM/AveEgnKqAg2d2VzVvsSkH+LbVS8K
b6GhXCPHlL+n+2Fs+Nb8HVMamhqVFhvkfIKwlVFNex1oqNRyH8nePQBxPozy
bQE0FLw//F7J4AA0Gkn9oRZLQwrdxh/Swz9Dx2XdUZkMGtq2JYwtpT0I08ZJ
59y5NHR8dcMPWvMg+K18YxbfjJ//OqbfizUESKbdRWmchhKF7PwslPgQmlp0
6pwwHa3oKU2j8/iwtVLreZEcHQlfYllt9R4GEfeARe56dERk2+X3S4xAVvAt
P545Hfnczo+ReD4CboOas5nudPRk/VWGuMco+OsrPPWIpCNxYx+NUJExGD+7
f0lpOh11bXjXHMgdg6Ry+8/x1XRUcBeUBuzGofKHC72nk45O5OuKy82PQ5bh
0xpqmo5CwlNZXTkToP2PskqmJIny+HJJIqYUhMmsWZOnSaKrd8Ltew5SYOHv
MblOi0TOFuPKj8wpiJ0JrX+ALcvlFhw4QkG041xChjaJoq4fq4l2pKCJLemc
vJlEp3VvfV0aSEFH7M5VMXokWhsmuX9xFgUfVFTf+CASzetd/K3tAQVmU88P
f8VuH//UlJVLgRpvOd9zF4nijhSf2FtIQYPzfRl3AxItrLPwDedSwOR9qnHZ
TaKuxut3yWYKTHsbNez2k6giYsapuZWCo6snJbqx2fp/qqd/oMDFq2L+mBGJ
TDKZJQY9FKRZKw3ZGJOoMqDuFWuYgnBHvzlrUxJxNuhcNx+jYNo/XqQV27s/
2UqBokC60FTV6gCJ1EzP9lZPUpCdGu9qcZBEQrSWjLgZCka7ZRMasftK9d3s
Z3EfJui52SEScd3SN2r+oqB8w8/pBuyb8sumFhYoyKs9pHXIjET/Aa2oLW8=

       "]]},
     Annotation[#, "Charting`Private`Tag$3746951#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.3795978221825571},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0.3795978221825571, 2.4142135479423446`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8548025858495913`*^9, 3.8548026050935893`*^9}, 
   3.854802640637599*^9},
 CellLabel->
  "Out[622]=",ExpressionUUID->"6cd098b1-03c9-4d3b-ab74-958ef8771d19"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"5", "-", 
      RowBox[{"4", 
       RowBox[{"Cosh", "[", "p", "]"}]}]}], "]"}], "+", 
    RowBox[{"2", 
     RowBox[{"Cosh", "[", "p", "]"}]}], "+", 
    RowBox[{"2", "m", " ", 
     RowBox[{"Sinh", "[", "p", "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "0", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.854802156302377*^9, 3.8548021647363796`*^9}},
 CellLabel->
  "In[616]:=",ExpressionUUID->"99d26dc1-8c77-47b1-b0ba-3b83501eb557"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "+", 
   RowBox[{"2", " ", "m", " ", "p"}], "+", 
   FractionBox[
    RowBox[{"m", " ", 
     SuperscriptBox["p", "3"]}], "3"], "-", 
   FractionBox[
    SuperscriptBox["p", "4"], "2"], "+", 
   FractionBox[
    RowBox[{"m", " ", 
     SuperscriptBox["p", "5"]}], "60"], "-", 
   FractionBox[
    RowBox[{"7", " ", 
     SuperscriptBox["p", "6"]}], "12"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "p", "]"}], "7"],
    SeriesData[$CellContext`p, 0, {}, 0, 7, 1],
    Editable->False]}],
  SeriesData[$CellContext`p, 0, {
   2, 2 $CellContext`m, 0, Rational[1, 3] $CellContext`m, 
    Rational[-1, 2], Rational[1, 60] $CellContext`m, 
    Rational[-7, 12]}, 0, 7, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.854802165612381*^9},
 CellLabel->
  "Out[616]=",ExpressionUUID->"d8c7f6d1-dc06-41d1-bb92-310181e7d6a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"5", "-", 
      RowBox[{"4", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "+", 
         RowBox[{"m", "^", "2"}]}], "]"}]}]}], "]"}], "+", 
    RowBox[{"2", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"1", "+", 
       RowBox[{"m", "^", "2"}]}], "]"}]}], "-", 
    RowBox[{"2", 
     RowBox[{"m", "^", "2"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8548027909591928`*^9, 3.854802798177189*^9}},
 CellLabel->
  "In[627]:=",ExpressionUUID->"c5ad8a24-c219-43eb-affa-bd4c71efdf16"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "-", 
   RowBox[{"2", " ", 
    SuperscriptBox["m", "2"]}], "-", 
   FractionBox[
    SuperscriptBox["m", "4"], "2"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "m", "]"}], "5"],
    SeriesData[$CellContext`m, 0, {}, 0, 5, 1],
    Editable->False]}],
  SeriesData[$CellContext`m, 0, {2, 0, -2, 0, 
    Rational[-1, 2]}, 0, 5, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.8548027988221908`*^9},
 CellLabel->
  "Out[627]=",ExpressionUUID->"42d03cda-279e-4c99-a6f8-14cc4956afa2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"l", ">", "t"}], "&&", 
    RowBox[{"l", ">", "0"}]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"4", 
          RowBox[{"Cosh", "[", "x", "]"}]}], "-", "5"}], "]"}], "/", 
       RowBox[{"(", 
        RowBox[{"m", "+", 
         RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}], 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"x", " ", "t"}], "]"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Exp", "[", 
          RowBox[{"l", " ", "x"}], "]"}], "+", "1"}], ")"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"ArcCosh", "[", 
        RowBox[{"5", "/", "4"}], "]"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8548107992086554`*^9, 3.8548109041077394`*^9}},
 CellLabel->
  "In[655]:=",ExpressionUUID->"4c3afb41-d501-4efd-92e5-e1b88334fa8a"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"ArcCosh", "[", 
    FractionBox["5", "4"], "]"}], "\[Infinity]"], 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", "x"}]], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{"-", "5"}], "+", 
       RowBox[{"4", " ", 
        RowBox[{"Cosh", "[", "x", "]"}]}]}]]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"l", " ", "x"}]]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"m", "+", 
       RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Output",
 CellChangeTimes->{3.854811940202724*^9},
 CellLabel->
  "Out[655]=",ExpressionUUID->"c436f5a2-6bb9-4d6e-8a43-c62d41fd7295"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{
           RowBox[{"4", 
            RowBox[{"Cosh", "[", "x", "]"}]}], "-", "5"}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"m", "+", 
           RowBox[{"Sinh", "[", 
            RowBox[{"-", "x"}], "]"}]}], ")"}]}], 
        RowBox[{
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", "x"}], " ", "t"}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Exp", "[", 
            RowBox[{
             RowBox[{"-", "l"}], " ", "x"}], "]"}], "+", "1"}], ")"}]}]}], 
       ",", 
       RowBox[{
        FractionBox[
         RowBox[{
          SuperscriptBox["2", "t"], " ", 
          SqrtBox["3"], " ", 
          SqrtBox[
           RowBox[{"x", "-", 
            RowBox[{"Log", "[", "2", "]"}]}]]}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "+", 
            SuperscriptBox["2", "l"]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            FractionBox["3", "4"], "+", "m"}], ")"}]}]], 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"3", "/", "4"}], "+", "l", "-", "t"}], ")"}]}], 
          RowBox[{"(", 
           RowBox[{"x", "-", 
            RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "]"}]}], ",", 
       RowBox[{
        FractionBox[
         RowBox[{
          SuperscriptBox["2", 
           RowBox[{"2", "+", "l", "-", "t"}]], " ", 
          SqrtBox["3"], " ", 
          SqrtBox[
           RowBox[{"x", "-", 
            RowBox[{"Log", "[", "2", "]"}]}]]}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "+", 
            SuperscriptBox["2", "l"]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "3"}], "+", 
            RowBox[{"4", " ", "m"}]}], ")"}]}]], 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"3", "/", "4"}], "+", "t"}], ")"}]}], 
          RowBox[{"(", 
           RowBox[{"x", "-", 
            RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"ArcCosh", "[", 
        RowBox[{"5", "/", "4"}], "]"}], ",", "l"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"l", "-", "1"}]}], "}"}], ",", "0", ",", "l", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"l", ",", "10", ",", "30", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.854812656064035*^9, 3.8548127501823187`*^9}, 
   3.854812807741251*^9, {3.8548128632436233`*^9, 3.854812866167555*^9}, {
   3.8548129022331047`*^9, 3.854812960849149*^9}, {3.85481303973458*^9, 
   3.854813076739976*^9}, {3.854813179819667*^9, 3.8548131806064987`*^9}, {
   3.8548132980635242`*^9, 3.854813306589204*^9}, {3.85481336484313*^9, 
   3.8548133658317146`*^9}, {3.854813423102524*^9, 3.854813448817548*^9}, {
   3.8550573060616493`*^9, 3.8550573066372137`*^9}, {3.855057465264429*^9, 
   3.8550575219916496`*^9}, {3.8550582273820744`*^9, 3.855058237366187*^9}, {
   3.8550583799991894`*^9, 3.8550583877035403`*^9}, {3.855058431846734*^9, 
   3.855058446302286*^9}, 3.855058563901226*^9, {3.8550586122172112`*^9, 
   3.8550586128343096`*^9}, {3.8550587382631063`*^9, 3.855058757211662*^9}, {
   3.8550589917203054`*^9, 3.8550590219821615`*^9}, {3.8550590672914715`*^9, 
   3.8550590819786625`*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"a92a3bb5-e5bf-4ed6-8a59-035d99825b6e"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`l$$ = 10, $CellContext`m$$ = 
    0, $CellContext`t$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`m$$], 0, 1}, {{
       Hold[$CellContext`t$$], -1 + $CellContext`l$$}, 0, 
      Dynamic[$CellContext`l$$], 1}, {
      Hold[$CellContext`l$$], 10, 30, 1}}, Typeset`size$$ = {
    360., {106., 111.52528970242}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`l$$ = 10, $CellContext`m$$ = 
        0, $CellContext`t$$ = -1 + $CellContext`l$$}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[{(Sqrt[4 Cosh[$CellContext`x] - 5]/($CellContext`m$$ + 
          Sinh[-$CellContext`x])) (Exp[(-$CellContext`x) $CellContext`t$$]/(
          Exp[(-$CellContext`l$$) $CellContext`x] + 
          1)), ((2^$CellContext`t$$ Sqrt[3]) (
           Sqrt[$CellContext`x - Log[2]]/((1 + 2^$CellContext`l$$) (
            3/4 + $CellContext`m$$)))) 
         Exp[(-(3/4 + $CellContext`l$$ - $CellContext`t$$)) ($CellContext`x - 
            Log[2])], ((2^(2 + $CellContext`l$$ - $CellContext`t$$) Sqrt[3]) (
           Sqrt[$CellContext`x - Log[2]]/((1 + 2^$CellContext`l$$) (-3 + 
            4 $CellContext`m$$)))) 
         Exp[(-(3/4 + $CellContext`t$$)) ($CellContext`x - Log[
            2])]}, {$CellContext`x, 
         ArcCosh[5/4], $CellContext`l$$}, PlotRange -> All], 
      "Specifications" :> {{$CellContext`m$$, 0, 
         1}, {{$CellContext`t$$, -1 + $CellContext`l$$}, 0, 
         Dynamic[$CellContext`l$$], 1}, {$CellContext`l$$, 10, 30, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{1035., {136., 142.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8548127352795687`*^9, 3.8548127511937084`*^9}, {
   3.854812787819743*^9, 3.8548128323527145`*^9}, 3.8548128671121826`*^9, {
   3.8548129618261757`*^9, 3.85481299083724*^9}, {3.8548130404013443`*^9, 
   3.8548130466993427`*^9}, 3.854813181186175*^9, {3.8548133080933566`*^9, 
   3.8548133130701456`*^9}, {3.8548133665661573`*^9, 3.854813371548379*^9}, {
   3.8548134244359045`*^9, 3.8548134493115444`*^9}, {3.8550572205440617`*^9, 
   3.85505726563997*^9}, {3.855057307700435*^9, 3.8550573301476617`*^9}, 
   3.8550574873999624`*^9, {3.855057523582608*^9, 3.855057546386361*^9}, 
   3.855058237813496*^9, {3.8550584516986666`*^9, 3.855058473271263*^9}, {
   3.8550586134111533`*^9, 3.855058617665747*^9}, {3.855058739825716*^9, 
   3.855058773443521*^9}, {3.85505902318442*^9, 3.8550590845080805`*^9}},
 CellLabel->
  "Out[135]=",ExpressionUUID->"0058305a-ad99-48fc-acca-af37fcdc647f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"l", ">", "t"}], "&&", 
     RowBox[{"m", ">", "0"}]}], ",", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["2", "t"], " ", 
         SqrtBox["3"], " ", 
         SqrtBox[
          RowBox[{"x", "-", 
           RowBox[{"Log", "[", "2", "]"}]}]]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox["2", "l"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           FractionBox["3", "4"], "+", "m"}], ")"}]}]], 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"3", "/", "4"}], "+", "l", "-", "t"}], ")"}]}], 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"Log", "[", "2", "]"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
   "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8550588004547763`*^9, 3.855058860295326*^9}, {
  3.855059180729503*^9, 3.8550591826799355`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"21469b6c-ebc6-4d4e-af13-4b1530f5b701"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["2", 
    RowBox[{"4", "+", "t"}]], " ", 
   SqrtBox[
    RowBox[{"3", " ", "\[Pi]"}]]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox["2", "l"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", "m"}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "l"}], "-", 
      RowBox[{"4", " ", "t"}]}], ")"}], 
    RowBox[{"3", "/", "2"}]]}]]], "Output",
 CellChangeTimes->{3.855058827527038*^9, 3.855058863684716*^9, 
  3.855059185247861*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"9148995c-389c-458b-9059-4827e9086b97"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"l", ">", "t", ">", "0"}], "&&", 
     RowBox[{"m", ">", "0"}]}], ",", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["2", 
          RowBox[{"2", "+", "l", "-", "t"}]], " ", 
         SqrtBox["3"], " ", 
         SqrtBox[
          RowBox[{"x", "-", 
           RowBox[{"Log", "[", "2", "]"}]}]]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox["2", "l"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "3"}], "+", 
           RowBox[{"4", " ", "m"}]}], ")"}]}]], 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"3", "/", "4"}], "+", "t"}], ")"}]}], 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"Log", "[", "2", "]"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
   "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8550588004547763`*^9, 3.855058860295326*^9}, {
  3.855059140811515*^9, 3.855059177415646*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"8c216cec-059c-4167-b3d0-9de955847e76"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["2", 
    RowBox[{"4", "+", "l", "-", "t"}]], " ", 
   SqrtBox[
    RowBox[{"3", " ", "\[Pi]"}]]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox["2", "l"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "3"}], "+", 
     RowBox[{"4", " ", "m"}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "t"}]}], ")"}], 
    RowBox[{"3", "/", "2"}]]}]]], "Output",
 CellChangeTimes->{{3.855059158502885*^9, 3.855059179844957*^9}},
 CellLabel->
  "Out[137]=",ExpressionUUID->"72b5ff57-890b-40b4-bb85-b66e2caf4996"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sqrt", "[", 
       RowBox[{
        RowBox[{"4", 
         RowBox[{"Cosh", "[", "x", "]"}]}], "-", "5"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"m", "+", 
        RowBox[{"Sinh", "[", 
         RowBox[{"-", "x"}], "]"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "x"}], " ", "t"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", "l"}], " ", "x"}], "]"}], "+", "1"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"Log", "[", "2", "]"}], ",", "1"}], "}"}]}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.855058274853002*^9, 3.8550582927282405`*^9}, {
  3.8550583949551287`*^9, 3.855058400108388*^9}, {3.8550589025610485`*^9, 
  3.85505890787984*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"7b26bfcd-46bb-41ad-b3dc-efccce9cf3e9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["2", 
      RowBox[{"2", "+", "l", "-", "t"}]], " ", 
     SqrtBox["3"], " ", 
     SqrtBox[
      RowBox[{"x", "-", 
       RowBox[{"Log", "[", "2", "]"}]}]]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["2", "l"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", 
       RowBox[{"4", " ", "m"}]}], ")"}]}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"x", "-", 
       RowBox[{"Log", "[", "2", "]"}]}], "]"}], 
     RowBox[{"3", "/", "2"}]],
    SeriesData[$CellContext`x, 
     Log[2], {}, 1, 3, 2],
    Editable->False]}],
  SeriesData[$CellContext`x, 
   Log[2], {
   2^(2 + $CellContext`l - $CellContext`t) 
    3^Rational[1, 2] (1 + 2^$CellContext`l)^(-1)/(-3 + 4 $CellContext`m)}, 1, 
   3, 2],
  Editable->False]], "Output",
 CellChangeTimes->{{3.855058287336375*^9, 3.8550582931559515`*^9}, 
   3.8550584005726123`*^9, 3.8550589086573544`*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"725296c3-7e56-43f8-938b-8d2c3af23a7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sqrt", "[", 
       RowBox[{
        RowBox[{"4", 
         RowBox[{"Cosh", "[", "x", "]"}]}], "-", "5"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"m", "+", 
        RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", " ", "t"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"l", " ", "x"}], "]"}], "+", "1"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"Log", "[", "2", "]"}], ",", "1"}], "}"}]}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.855058274853002*^9, 3.8550582927282405`*^9}, {
  3.8550583949551287`*^9, 3.855058400108388*^9}, {3.8550589025610485`*^9, 
  3.85505890787984*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"69e0b677-9395-43ca-a9d5-8e03a5896e5f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["2", "t"], " ", 
     SqrtBox["3"], " ", 
     SqrtBox[
      RowBox[{"x", "-", 
       RowBox[{"Log", "[", "2", "]"}]}]]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["2", "l"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox["3", "4"], "+", "m"}], ")"}]}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"x", "-", 
       RowBox[{"Log", "[", "2", "]"}]}], "]"}], 
     RowBox[{"3", "/", "2"}]],
    SeriesData[$CellContext`x, 
     Log[2], {}, 1, 3, 2],
    Editable->False]}],
  SeriesData[$CellContext`x, 
   Log[2], {
   2^$CellContext`t 3^Rational[1, 2] (1 + 2^$CellContext`l)^(-1)/(
    Rational[3, 4] + $CellContext`m)}, 1, 3, 2],
  Editable->False]], "Output",
 CellChangeTimes->{3.855058939702352*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"f9a5bc86-a335-4ce3-b519-02ab7984b5b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Exp", "@", 
   RowBox[{"ArcCosh", "[", 
    RowBox[{"5", "/", "4"}], "]"}]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.8548135265143027`*^9, 3.8548135283853917`*^9}, {
  3.8548135634595137`*^9, 3.85481356606061*^9}},
 CellLabel->
  "In[687]:=",ExpressionUUID->"962ace9a-d9e3-4d65-9732-7205f7be0211"],

Cell[BoxData["2.`"], "Output",
 CellChangeTimes->{3.8548135290596724`*^9, 3.8548135666778274`*^9},
 CellLabel->
  "Out[687]=",ExpressionUUID->"ed5fe410-53a3-45c1-b7e2-5276d9ebbb96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sqrt", "[", 
       RowBox[{
        RowBox[{"4", 
         RowBox[{"Cosh", "[", "x", "]"}]}], "-", "5"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"m", "+", 
        RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", " ", "t"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"l", " ", "x"}], "]"}], "+", "1"}], ")"}]}]}], ",", "x"}], 
   "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8548132107002463`*^9, 3.8548132271504297`*^9}},
 CellLabel->
  "In[680]:=",ExpressionUUID->"75c57d68-a25f-440b-a368-db15168bfa46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"t", " ", "x"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"l", " ", "x"}]]}], ")"}]}], " ", 
       RowBox[{"Cosh", "[", "x", "]"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "5"}], "+", 
         RowBox[{"4", " ", 
          RowBox[{"Cosh", "[", "x", "]"}]}]}], ")"}]}], "-", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"l", " ", "x"}]], " ", "l", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "5"}], "+", 
         RowBox[{"4", " ", 
          RowBox[{"Cosh", "[", "x", "]"}]}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"m", "+", 
         RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"l", " ", "x"}]]}], ")"}], " ", "t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "5"}], "+", 
         RowBox[{"4", " ", 
          RowBox[{"Cosh", "[", "x", "]"}]}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"m", "+", 
         RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"l", " ", "x"}]]}], ")"}], " ", 
       RowBox[{"Sinh", "[", "x", "]"}], " ", 
       RowBox[{"(", 
        RowBox[{"m", "+", 
         RowBox[{"Sinh", "[", "x", "]"}]}], ")"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"l", " ", "x"}]]}], ")"}], "2"], " ", 
    SqrtBox[
     RowBox[{
      RowBox[{"-", "5"}], "+", 
      RowBox[{"4", " ", 
       RowBox[{"Cosh", "[", "x", "]"}]}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"m", "+", 
       RowBox[{"Sinh", "[", "x", "]"}]}], ")"}], "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8548132343514347`*^9},
 CellLabel->
  "Out[680]=",ExpressionUUID->"2ecda6a6-ddb8-452c-a4a8-7ad30589e496"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"m", ">", "0"}], ",", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", "m", ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"m", "^", "2"}], "+", 
          RowBox[{"p", "^", "2"}]}], ")"}]}], 
       RowBox[{"Exp", "[", 
        RowBox[{"I", " ", "x", " ", "p"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"p", ",", 
        RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], "]"}],
   "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.854725758863903*^9, 3.854725807916253*^9}, {
  3.854725872933776*^9, 3.854725879744554*^9}, {3.854725987355776*^9, 
  3.854725995722589*^9}, {3.8547260832437553`*^9, 3.854726084449691*^9}, {
  3.854726114546601*^9, 3.854726176193758*^9}, {3.854726361329404*^9, 
  3.85472636278829*^9}, {3.854726499089448*^9, 3.8547265021801834`*^9}, {
  3.8547331067977953`*^9, 3.8547331073830967`*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"10525d4e-44df-4fff-81a9-4c4d7a450221"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
        RowBox[{"-", "m"}], " ", 
        RowBox[{"Abs", "[", "x", "]"}]}]], " ", "\[Pi]"}], 
   RowBox[{"x", "\[Element]", 
     TemplateBox[{}, "Reals"]}]},
  "ConditionalExpression"]], "Output",
 CellChangeTimes->{3.8547258309353533`*^9, 3.8547259011924686`*^9, 
  3.8547260172283535`*^9, 3.8547261040771017`*^9, 3.854726487521551*^9, 
  3.8547265281044254`*^9, 3.854733131901651*^9},
 CellLabel->
  "Out[276]=",ExpressionUUID->"07367b54-abeb-4b35-8c60-edd2a4652b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"m", ">", "0"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"x", "\[Element]", "Integers"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"m", "-", 
           RowBox[{"I", " ", "p"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"m", "^", "2"}], "+", 
           RowBox[{"p", "^", "2"}]}], ")"}]}], 
        RowBox[{"Exp", "[", 
         RowBox[{"I", " ", "x", " ", "p"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"p", ",", 
         RowBox[{
          RowBox[{"-", "2"}], "Pi"}], ",", 
         RowBox[{"2", "Pi"}]}], "}"}]}], "]"}], 
     RowBox[{"Exp", "[", 
      RowBox[{"m", " ", "x"}], "]"}]}], "//", "FullSimplify"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.854725758863903*^9, 3.854725807916253*^9}, {
  3.854725872933776*^9, 3.854725879744554*^9}, {3.854725987355776*^9, 
  3.854725995722589*^9}, {3.8547260832437553`*^9, 3.854726084449691*^9}, {
  3.854726114546601*^9, 3.854726176193758*^9}, {3.854726361329404*^9, 
  3.85472636278829*^9}, {3.854726499089448*^9, 3.8547265021801834`*^9}, {
  3.854726595213179*^9, 3.8547265993415833`*^9}, {3.854727473884337*^9, 
  3.854727477099089*^9}, {3.854727512033034*^9, 3.8547275177670217`*^9}, {
  3.8547276336688104`*^9, 3.854727666453598*^9}, {3.854728247521114*^9, 
  3.8547282934981656`*^9}, {3.8547291176189847`*^9, 3.854729122378637*^9}, {
  3.854729344524658*^9, 3.85472934773623*^9}, {3.854730319745596*^9, 
  3.854730339926567*^9}, {3.8547303893561773`*^9, 3.8547303901005473`*^9}, {
  3.854730525943054*^9, 3.854730527410614*^9}},
 CellLabel->
  "In[255]:=",ExpressionUUID->"de1409e1-cd45-4e22-905d-1025efde05b6"],

Cell[BoxData[
 RowBox[{"\[ImaginaryI]", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"m", "-", 
        RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}], " ", 
      "x"}], "]"}], "-", 
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"m", "+", 
        RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}], " ", 
      "x"}], "]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.8547276825722184`*^9, {3.854728287778477*^9, 3.8547283090636873`*^9}, 
   3.854729155053287*^9, 3.854730372322975*^9, 3.854730559327677*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"5591d94e-0016-4e53-b84a-731334a3a484"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"finite", "[", 
   RowBox[{"Lt_", ",", "p_", ",", "m_"}], "]"}], ":=", 
  RowBox[{"Evaluate", "@", 
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"m", ">", "0"}], "&&", 
      RowBox[{"p", "\[Element]", "Reals"}]}], ",", 
     RowBox[{"FullSimplify", "@", 
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", "m"}], " ", "x"}], "]"}], 
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", "I"}], " ", "p", " ", "x"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{"Lt", "/", "2"}]}], "}"}]}], "]"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8547293905804186`*^9, 3.8547294908889337`*^9}, {
  3.8547295323684344`*^9, 3.854729595011803*^9}},
 CellLabel->
  "In[243]:=",ExpressionUUID->"24391706-d87c-4f7f-9cea-18534e3528b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"finite", "[", 
      RowBox[{"Lt", ",", "p", ",", "m"}], "]"}], "+", 
     RowBox[{"finite", "[", 
      RowBox[{"Lt", ",", 
       RowBox[{"-", "p"}], ",", "m"}], "]"}]}], ")"}], "/", "2"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8547295987070675`*^9, 3.854729634375332*^9}, {
  3.854729675084705*^9, 3.854729676185005*^9}, {3.8547297300710716`*^9, 
  3.854729730894739*^9}, {3.854729856841367*^9, 3.854729887230693*^9}, {
  3.854729918812829*^9, 3.854729925843424*^9}, {3.8547316090094705`*^9, 
  3.8547316308332014`*^9}, {3.85473167540679*^9, 3.854731683315423*^9}},
 CellLabel->
  "In[252]:=",ExpressionUUID->"9b0c7103-8efe-469c-8bc1-a40d8a8d74ae"],

Cell[BoxData[
 FractionBox[
  RowBox[{"m", "-", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"Lt", " ", "m"}], "2"]}]], " ", "m", " ", 
    RowBox[{"Cos", "[", 
     FractionBox[
      RowBox[{"Lt", " ", "p"}], "2"], "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"Lt", " ", "m"}], "2"]}]], " ", "p", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"Lt", " ", "p"}], "2"], "]"}]}]}], 
  RowBox[{
   SuperscriptBox["m", "2"], "+", 
   SuperscriptBox["p", "2"]}]]], "Output",
 CellChangeTimes->{{3.8547296043336563`*^9, 3.854729634710271*^9}, 
   3.8547296784563465`*^9, 3.854729732049547*^9, {3.854729857232188*^9, 
   3.854729887972224*^9}, 3.854729929720134*^9},
 CellLabel->
  "Out[252]=",ExpressionUUID->"f06bba48-2c22-405d-9346-86fc2b51996a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListLogLogPlot", "[", 
    RowBox[{"Transpose", "@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"2", "Pi"}], "-", 
          RowBox[{"(", 
           RowBox[{"Im", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"ExpIntegralEi", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"m", "-", 
                  RowBox[{"2", "\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}], " ", 
                "x"}], "]"}]}], "+", 
             RowBox[{"ExpIntegralEi", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"m", "+", 
                 RowBox[{"2", "\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}], " ", 
               "x"}], "]"}]}], "]"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"1", "/", "Pi"}], "/", "x"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "Lt", ",", "1"}], "}"}]}], "]"}]}], "]"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Lt", ",", "20"}], "}"}], ",", "0", ",", "60", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Epsilon]", ",", ".2"}], "}"}], ",", "0", ",", "1"}], "}"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.854727734378026*^9, 3.8547277572530003`*^9}, {
   3.8547278518503094`*^9, 3.854727895399145*^9}, 3.854727939226433*^9, {
   3.8547283179074216`*^9, 3.8547283401627226`*^9}, {3.854728570253399*^9, 
   3.854728576411846*^9}, {3.8547286152508116`*^9, 3.8547287239433017`*^9}, {
   3.8547287662118073`*^9, 3.85472878922937*^9}, {3.8547288510136433`*^9, 
   3.854728870551957*^9}, {3.8547291766274853`*^9, 3.854729233424617*^9}, 
   3.85473049092898*^9, {3.8547305403946433`*^9, 3.8547305489662285`*^9}, {
   3.8547305925476465`*^9, 3.8547306105560465`*^9}, {3.854730910705285*^9, 
   3.8547309466758204`*^9}, {3.8547310275851684`*^9, 
   3.8547310775369387`*^9}, {3.854731317915654*^9, 3.8547313637124853`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"2640a51f-4465-41f3-a64e-f892031d159c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`Lt$$ = 20, $CellContext`m$$ = 
    0, $CellContext`\[Epsilon]$$ = 0.2, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`m$$], 0, 1}, {{
       Hold[$CellContext`Lt$$], 20}, 0, 60, 1}, {{
       Hold[$CellContext`\[Epsilon]$$], 0.2}, 0, 1}}, Typeset`size$$ = {
    360., {109., 114.36286440533956`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`Lt$$ = 20, $CellContext`m$$ = 
        0, $CellContext`\[Epsilon]$$ = 0.2}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListLogLogPlot[
        Transpose[
         Table[{
          2 Pi - Im[-
             ExpIntegralEi[($CellContext`m$$ - (2 I) Pi) $CellContext`x] + 
            ExpIntegralEi[($CellContext`m$$ + (2 I) Pi) $CellContext`x]], (1/
            Pi)/$CellContext`x}, {$CellContext`x, 1, $CellContext`Lt$$, 1}]]],
       "Specifications" :> {{$CellContext`m$$, 0, 
         1}, {{$CellContext`Lt$$, 20}, 0, 60, 
         1}, {{$CellContext`\[Epsilon]$$, 0.2}, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1035., {139., 145.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8547277421785383`*^9, 3.8547277578387175`*^9}, {
   3.8547278962671537`*^9, 3.8547279095809565`*^9}, {3.8547279403546443`*^9, 
   3.8547279515862045`*^9}, {3.854728341426829*^9, 3.8547283464146137`*^9}, 
   3.8547286931651*^9, 3.854728724872429*^9, {3.854728772094544*^9, 
   3.8547287902462983`*^9}, 3.854728821371402*^9, {3.854728852237482*^9, 
   3.8547288744717073`*^9}, {3.8547292049246116`*^9, 3.8547292419286757`*^9}, 
   3.854730492159911*^9, 3.8547305677079525`*^9, {3.854730597970333*^9, 
   3.8547306112534547`*^9}, 3.8547306807077684`*^9, 3.8547308862013407`*^9, {
   3.854730921558766*^9, 3.8547309628469267`*^9}, {3.854731051687853*^9, 
   3.8547310791826096`*^9}, {3.8547313234633093`*^9, 3.85473136474804*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"0cd0c58b-610d-4cdc-8eb0-4dd2f256081e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"Lt", " ", 
     RowBox[{"m", "/", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "0", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8547082591057887`*^9, 3.8547082749832497`*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"f21aea8e-24bc-4e96-9e09-06753449835c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["Lt", "2"], " ", 
     SuperscriptBox["m", "2"]}], "8"], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox["Lt", "4"], " ", 
     SuperscriptBox["m", "4"]}], "384"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "m", "]"}], "5"],
    SeriesData[$CellContext`m, 0, {}, 0, 5, 1],
    Editable->False]}],
  SeriesData[$CellContext`m, 0, {
   1, 0, Rational[-1, 8] $CellContext`Lt^2, 0, 
    Rational[1, 384] $CellContext`Lt^4}, 0, 5, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.8547082766812487`*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"1f5a1aa5-fd67-488e-8b42-0415393e9427"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cosh", "[", 
    RowBox[{"t", "-", "a"}], "]"}], "/", 
   RowBox[{"Cosh", "[", "a", "]"}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8537455236075754`*^9, 3.8537455263015575`*^9}, {
  3.853745663875721*^9, 3.853745674054884*^9}, {3.853746762352512*^9, 
  3.8537467729754615`*^9}, {3.8537481496811666`*^9, 3.8537481654373436`*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"149c6186-4c1c-47ed-84c9-24896617521a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cosh", "[", 
   RowBox[{"a", "-", "t"}], "]"}], " ", 
  RowBox[{"Sech", "[", "a", "]"}]}]], "Output",
 CellChangeTimes->{
  3.853745526798309*^9, {3.853745669822895*^9, 3.8537456746538467`*^9}, {
   3.853746766525256*^9, 3.8537467737960095`*^9}, 3.853748165874337*^9, 
   3.8539082841592607`*^9, 3.8547063441053705`*^9},
 CellLabel->
  "Out[178]=",ExpressionUUID->"2d154ca3-0f6e-4ea3-a643-4ddac429c828"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "/", 
   RowBox[{"Pi", "^", "2"}]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.8537467924248285`*^9, 3.8537467991316614`*^9}, {
  3.853746876990487*^9, 3.8537468791990147`*^9}, {3.8537470241117973`*^9, 
  3.853747026322932*^9}},
 CellLabel->
  "In[179]:=",ExpressionUUID->"f290f768-d35d-4731-8d71-86d37b911027"],

Cell[BoxData["0.20264236728467555`"], "Output",
 CellChangeTimes->{{3.853746795511639*^9, 3.8537467997050886`*^9}, 
   3.8537468808784747`*^9, 3.8537470274367943`*^9, 3.8539082841712604`*^9, 
   3.854706344212379*^9},
 CellLabel->
  "Out[179]=",ExpressionUUID->"bbe2e3c5-9f1b-4d4a-988a-f73ffb90385e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"cP001", "[", 
      RowBox[{"m", ",", "x", ",", "p"}], "]"}], "-", 
     RowBox[{"cP003", "[", 
      RowBox[{"m", ",", "x", ",", "p"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
  "Simplify"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"cP001", "[", 
     RowBox[{"m", ",", "x", ",", "p"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
  "Simplify"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"cP003", "[", 
     RowBox[{"m", ",", "x", ",", "p"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
  "Simplify"}]}], "Input",
 CellChangeTimes->{{3.8536880329108105`*^9, 3.853688037696966*^9}, {
  3.8536880845119867`*^9, 3.8536881802124166`*^9}, {3.853688245134477*^9, 
  3.8536883042735367`*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"d055b4ca-2457-4a27-8074-ce4133abb678"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"16", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"2", " ", 
          RowBox[{"ArcCosh", "[", 
           FractionBox[
            RowBox[{"3", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}], 
            RowBox[{"2", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], ")"}], " ", 
      "m", " ", 
      RowBox[{"Cos", "[", 
       FractionBox["p", "2"], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"2", " ", 
           RowBox[{"ArcCosh", "[", 
            FractionBox[
             RowBox[{"3", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}], 
             RowBox[{"2", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], "+", 
        SuperscriptBox["m", "2"], "+", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"ArcCosh", "[", 
           FractionBox[
            RowBox[{"3", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}], 
            RowBox[{"2", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           SuperscriptBox["m", "2"], "-", 
           RowBox[{"5", " ", "\[ImaginaryI]", " ", 
            SqrtBox[
             FractionBox["1", 
              RowBox[{"5", "-", 
               RowBox[{"4", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]]]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]], "-", 
           SuperscriptBox["m", "2"], "+", 
           RowBox[{"4", " ", "\[ImaginaryI]", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], " ", 
            SqrtBox[
             FractionBox["1", 
              RowBox[{"5", "-", 
               RowBox[{"4", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]]]}]}], ")"}], " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"Sin", "[", 
        FractionBox["p", "2"], "]"}], "3"], " ", "x"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      SqrtBox[
       FractionBox["1", 
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "5"}], "+", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], "+", 
            SuperscriptBox["m", "2"]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", 
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"2", " ", 
               RowBox[{"ArcCosh", "[", 
                FractionBox[
                 RowBox[{"3", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}], 
                 RowBox[{"2", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], "+", 
            SuperscriptBox["m", "2"]}], ")"}], " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], "2"]}], ")"}]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "2"],
    SeriesData[$CellContext`x, 0, {}, 1, 2, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {
   16 (-1 + E^(2 
       ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
          Cos[$CellContext`p])])) $CellContext`m 
    Cos[Rational[1, 2] $CellContext`p] ((5 - 4 Cos[$CellContext`p])^(-1))^
     Rational[-1, 2] (-5 + 
      4 Cos[$CellContext`p])^(-1) ((-1 + 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) (
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] + $CellContext`m^2) + (-
         E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
              Cos[$CellContext`p])]) + $CellContext`m^2) 
       Cos[$CellContext`p])^(-2) (-
      E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
           Cos[$CellContext`p])]) + $CellContext`m^2 + 
     E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 Cos[$CellContext`p])] (
       1 - $CellContext`m^2 + 
       Complex[0, -5] ((5 - 4 Cos[$CellContext`p])^(-1))^Rational[1, 2]) + (
       E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) - $CellContext`m^2 + 
       Complex[0, 4] 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] ((5 - 4 Cos[$CellContext`p])^(-1))^
         Rational[1, 2]) Cos[$CellContext`p]) 
    Sin[Rational[1, 2] $CellContext`p]^3}, 1, 2, 1],
  Editable->False]], "Output",
 CellChangeTimes->{{3.8536880697452145`*^9, 3.853688091766327*^9}, {
   3.853688123072117*^9, 3.853688181277814*^9}, 3.8536882719645963`*^9, 
   3.8536883056199284`*^9, 3.8539082908492613`*^9, 3.854706350452374*^9},
 CellLabel->
  "Out[180]=",ExpressionUUID->"062a5be5-b988-440b-855d-3bb9ab1269b6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", " ", "\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"2", " ", 
          RowBox[{"ArcCosh", "[", 
           FractionBox[
            RowBox[{"3", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}], 
            RowBox[{"2", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"Cos", "[", "p", "]"}]}], ")"}], " ", 
      RowBox[{"Sin", "[", "p", "]"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      SqrtBox[
       FractionBox["1", 
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "5"}], "+", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]]}], ")"}]}], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"ArcCosh", "[", 
             FractionBox[
              RowBox[{"3", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}], 
              RowBox[{"2", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], "+", 
           SuperscriptBox["m", "2"]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]], "-", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}]}], ")"}]}], "-", 
   FractionBox[
    RowBox[{"4", " ", "\[ImaginaryI]", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"ArcCosh", "[", 
       FractionBox[
        RowBox[{"3", "-", 
         RowBox[{"2", " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}], 
        RowBox[{"2", "-", 
         RowBox[{"2", " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", 
         RowBox[{"ArcCosh", "[", 
          FractionBox[
           RowBox[{"3", "-", 
            RowBox[{"2", " ", 
             RowBox[{"Cos", "[", "p", "]"}]}]}], 
           RowBox[{"2", "-", 
            RowBox[{"2", " ", 
             RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], ")"}], " ", "m",
      " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"Cos", "[", "p", "]"}]}], ")"}], " ", 
     RowBox[{"Sin", "[", "p", "]"}], " ", "x"}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"ArcCosh", "[", 
            FractionBox[
             RowBox[{"3", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}], 
             RowBox[{"2", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"ArcCosh", "[", 
            FractionBox[
             RowBox[{"3", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}], 
             RowBox[{"2", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], "+", 
          SuperscriptBox["m", "2"]}], ")"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], "+", 
          SuperscriptBox["m", "2"]}], ")"}], " ", 
        RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], "2"]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "2"],
    SeriesData[$CellContext`x, 0, {}, 0, 2, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {
   Complex[0, 2] (-1 + 
     E^(2 
       ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
          Cos[$CellContext`p])])) ((5 - 4 Cos[$CellContext`p])^(-1))^
     Rational[-1, 2] (-1 + 
     Cos[$CellContext`p]) (-5 + 
      4 Cos[$CellContext`p])^(-1) (-(-1 + 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) (
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] + $CellContext`m^2) + (
        E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
             Cos[$CellContext`p])]) - $CellContext`m^2) 
       Cos[$CellContext`p])^(-1) Sin[$CellContext`p], Complex[0, -4] 
    E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
        Cos[$CellContext`p])] (-1 + 
     E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
          Cos[$CellContext`p])])) $CellContext`m (-1 + 
     Cos[$CellContext`p]) ((-1 + 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) (
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] + $CellContext`m^2) + (-
         E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
              Cos[$CellContext`p])]) + $CellContext`m^2) 
       Cos[$CellContext`p])^(-2) Sin[$CellContext`p]}, 0, 2, 1],
  Editable->False]], "Output",
 CellChangeTimes->{{3.8536880697452145`*^9, 3.853688091766327*^9}, {
   3.853688123072117*^9, 3.853688181277814*^9}, 3.8536882719645963`*^9, 
   3.8536883056199284`*^9, 3.8539082908492613`*^9, 3.854706350711377*^9},
 CellLabel->
  "Out[181]=",ExpressionUUID->"22364de2-85e8-4371-b7f5-ed0de4e78c66"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"-", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"8", " ", "\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"2", " ", 
            RowBox[{"ArcCosh", "[", 
             FractionBox[
              RowBox[{"3", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}], 
              RowBox[{"2", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], ")"}], " ", 
        RowBox[{"Cos", "[", 
         FractionBox["p", "2"], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", 
          FractionBox["p", "2"], "]"}], "3"]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         FractionBox["1", 
          RowBox[{"5", "-", 
           RowBox[{"4", " ", 
            RowBox[{"Cos", "[", "p", "]"}]}]}]]], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5"}], "+", 
          RowBox[{"4", " ", 
           RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"ArcCosh", "[", 
                FractionBox[
                 RowBox[{"3", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}], 
                 RowBox[{"2", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]]}], ")"}]}], 
           " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"ArcCosh", "[", 
               FractionBox[
                RowBox[{"3", "-", 
                 RowBox[{"2", " ", 
                  RowBox[{"Cos", "[", "p", "]"}]}]}], 
                RowBox[{"2", "-", 
                 RowBox[{"2", " ", 
                  RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], "+", 
             SuperscriptBox["m", "2"]}], ")"}]}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"2", " ", 
               RowBox[{"ArcCosh", "[", 
                FractionBox[
                 RowBox[{"3", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}], 
                 RowBox[{"2", "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]], "-", 
             SuperscriptBox["m", "2"]}], ")"}], " ", 
           RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}]}], ")"}]}], ")"}]}], "-", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"16", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"2", " ", 
            RowBox[{"ArcCosh", "[", 
             FractionBox[
              RowBox[{"3", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}], 
              RowBox[{"2", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]]}], ")"}], " ", 
        "m", " ", 
        RowBox[{"Cos", "[", 
         FractionBox["p", "2"], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", 
          FractionBox["p", "2"], "]"}], "3"]}], ")"}], " ", "x"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      SqrtBox[
       FractionBox["1", 
        RowBox[{"5", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Cos", "[", "p", "]"}]}]}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "5"}], "+", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]]}], ")"}]}], " ", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"ArcCosh", "[", 
             FractionBox[
              RowBox[{"3", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}], 
              RowBox[{"2", "-", 
               RowBox[{"2", " ", 
                RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]], "+", 
           SuperscriptBox["m", "2"]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", 
             RowBox[{"ArcCosh", "[", 
              FractionBox[
               RowBox[{"3", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], 
               RowBox[{"2", "-", 
                RowBox[{"2", " ", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}]], "]"}]}]], "-", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Cos", "[", "p", "]"}]}]}], ")"}]}], ")"}]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "2"],
    SeriesData[$CellContext`x, 0, {}, 0, 2, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {
   Complex[0, -8] (-1 + 
     E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
          Cos[$CellContext`p])])) 
    Cos[Rational[1, 2] $CellContext`p] ((5 - 4 Cos[$CellContext`p])^(-1))^
     Rational[-1, 2] (-5 + 
      4 Cos[$CellContext`p])^(-1) (-(-1 + 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) (
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] + $CellContext`m^2) + (
        E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
             Cos[$CellContext`p])]) - $CellContext`m^2) 
       Cos[$CellContext`p])^(-1) 
    Sin[Rational[1, 2] $CellContext`p]^3, (-16) (-1 + 
     E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
          Cos[$CellContext`p])])) $CellContext`m 
    Cos[Rational[1, 2] $CellContext`p] ((5 - 4 Cos[$CellContext`p])^(-1))^
     Rational[-1, 2] (-5 + 
      4 Cos[$CellContext`p])^(-1) (-(-1 + 
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])]) (
        E^ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
            Cos[$CellContext`p])] + $CellContext`m^2) + (
        E^(2 ArcCosh[(2 - 2 Cos[$CellContext`p])^(-1) (3 - 2 
             Cos[$CellContext`p])]) - $CellContext`m^2) 
       Cos[$CellContext`p])^(-1) Sin[Rational[1, 2] $CellContext`p]^3}, 0, 2, 
   1],
  Editable->False]], "Output",
 CellChangeTimes->{{3.8536880697452145`*^9, 3.853688091766327*^9}, {
   3.853688123072117*^9, 3.853688181277814*^9}, 3.8536882719645963`*^9, 
   3.8536883056199284`*^9, 3.8539082908492613`*^9, 3.85470635101138*^9},
 CellLabel->
  "Out[182]=",ExpressionUUID->"d9a08ea0-46fb-49f6-b175-7f3e1a7d2560"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"greens", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "Ls"}], "}"}], ",", "m", ",", "1"}], "]"}], "//", 
   "FullSimplify"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8530834368522577`*^9, 3.8530834578599787`*^9}, {
  3.853084003071165*^9, 3.8530840263950253`*^9}, {3.8530841177745476`*^9, 
  3.8530841419387145`*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"4fdb01ba-ab78-4bb0-95c6-37762e18491a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", 
       FractionBox[
        RowBox[{"bb", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"2", "+", "Ls", "+", "s"}], ")"}]}], " ", "\[Alpha]"}]], 
         " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "\[Alpha]"}]]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]}]], " ", "m"}], "-", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "s", " ", "\[Alpha]"}]}]], " ", "m"}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", "Ls"}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}], "-", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}]}], ")"}]}], 
        RowBox[{"4", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "b", " ", "m", " ", 
            RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sinh", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], 
              "+", 
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"Sinh", "[", 
                RowBox[{"\[Alpha]", "-", 
                 RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}], 
          ")"}]}]]}], "0", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", "bb", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["m", "2"]}], ")"}], " ", 
        RowBox[{"Sinh", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Sinh", "[", 
         RowBox[{"\[Alpha]", "-", 
          RowBox[{"s", " ", "\[Alpha]"}]}], "]"}]}], 
       RowBox[{
        RowBox[{"2", " ", "b", " ", "m", " ", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Sinh", "[", 
          RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"b", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Sinh", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], "+", 
           RowBox[{
            SuperscriptBox["m", "2"], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"\[Alpha]", "-", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}]], "0"},
     {"0", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"bb", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"2", "+", "Ls", "+", "s"}], ")"}]}], " ", "\[Alpha]"}]], 
         " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "\[Alpha]"}]]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]}]], " ", "m"}], "-", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "s", " ", "\[Alpha]"}]}]], " ", "m"}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", "Ls"}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}], "-", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}]}], ")"}]}], 
        RowBox[{"4", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "b", " ", "m", " ", 
            RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sinh", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], 
              "+", 
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"Sinh", "[", 
                RowBox[{"\[Alpha]", "-", 
                 RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}], 
          ")"}]}]]}], "0", 
      FractionBox[
       RowBox[{"\[ImaginaryI]", " ", "bb", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["m", "2"]}], ")"}], " ", 
        RowBox[{"Sinh", "[", "\[Alpha]", "]"}], " ", 
        RowBox[{"Sinh", "[", 
         RowBox[{"\[Alpha]", "-", 
          RowBox[{"s", " ", "\[Alpha]"}]}], "]"}]}], 
       RowBox[{
        RowBox[{"2", " ", "b", " ", "m", " ", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Sinh", "[", 
          RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"b", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Sinh", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], "+", 
           RowBox[{
            SuperscriptBox["m", "2"], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"\[Alpha]", "-", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}]]},
     {
      RowBox[{"-", 
       FractionBox[
        RowBox[{"\[ImaginaryI]", " ", "bb", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}], " ", 
         RowBox[{"Sinh", "[", 
          RowBox[{"\[Alpha]", "-", 
           RowBox[{"s", " ", "\[Alpha]"}]}], "]"}]}], 
        RowBox[{
         RowBox[{"2", " ", "b", " ", "m", " ", 
          RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["m", "2"]}], ")"}], " ", 
          RowBox[{"Sinh", "[", 
           RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Sinh", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], "+", 
            RowBox[{
             SuperscriptBox["m", "2"], " ", 
             RowBox[{"Sinh", "[", 
              RowBox[{"\[Alpha]", "-", 
               RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}]]}], 
      "0", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"bb", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"2", "+", "Ls", "+", "s"}], ")"}]}], " ", "\[Alpha]"}]], 
         " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "\[Alpha]"}]]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]}]], " ", "m"}], "-", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "s", " ", "\[Alpha]"}]}]], " ", "m"}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", "Ls"}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}], "-", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}]}], ")"}]}], 
        RowBox[{"4", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "b", " ", "m", " ", 
            RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sinh", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], 
              "+", 
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"Sinh", "[", 
                RowBox[{"\[Alpha]", "-", 
                 RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}], 
          ")"}]}]]}], "0"},
     {"0", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"\[ImaginaryI]", " ", "bb", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["m", "2"]}], ")"}], " ", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}], " ", 
         RowBox[{"Sinh", "[", 
          RowBox[{"\[Alpha]", "-", 
           RowBox[{"s", " ", "\[Alpha]"}]}], "]"}]}], 
        RowBox[{
         RowBox[{"2", " ", "b", " ", "m", " ", 
          RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["m", "2"]}], ")"}], " ", 
          RowBox[{"Sinh", "[", 
           RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Sinh", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], "+", 
            RowBox[{
             SuperscriptBox["m", "2"], " ", 
             RowBox[{"Sinh", "[", 
              RowBox[{"\[Alpha]", "-", 
               RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}]]}], 
      "0", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"bb", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"2", "+", "Ls", "+", "s"}], ")"}]}], " ", "\[Alpha]"}]], 
         " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "\[Alpha]"}]]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"Ls", " ", "\[Alpha]"}]}]]}], "+", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "Ls", " ", "\[Alpha]"}]}]], " ", "m"}], "-", 
           RowBox[{"2", " ", "b", " ", 
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{"\[Alpha]", "+", 
              RowBox[{"2", " ", "s", " ", "\[Alpha]"}]}]], " ", "m"}], "+", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"2", "+", "Ls"}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}], "-", 
           RowBox[{
            SuperscriptBox["\[ExponentialE]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Ls", "+", 
                RowBox[{"2", " ", "s"}]}], ")"}], " ", "\[Alpha]"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}]}]}], ")"}]}], 
        RowBox[{"4", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "b", " ", "m", " ", 
            RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["m", "2"]}], ")"}], " ", 
            RowBox[{"Sinh", "[", 
             RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sinh", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], 
              "+", 
              RowBox[{
               SuperscriptBox["m", "2"], " ", 
               RowBox[{"Sinh", "[", 
                RowBox[{"\[Alpha]", "-", 
                 RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}], 
          ")"}]}]]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8530835357775097`*^9, {3.853084003848443*^9, 3.8530840268764677`*^9}, {
   3.853084118835842*^9, 3.8530841496224213`*^9}, 3.8539082976882935`*^9, 
   3.8547063587063713`*^9},
 CellLabel->
  "Out[183]//MatrixForm=",ExpressionUUID->"4f42713f-e0b6-4d47-96b3-\
43e1506941ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\[CapitalDelta]", "[", 
   RowBox[{"m", ",", "1"}], "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.853083554693742*^9, 3.853083589084446*^9}},
 CellLabel->
  "In[184]:=",ExpressionUUID->"2310420f-0c9d-41ae-8a11-13518b1eea0d"],

Cell[BoxData[
 RowBox[{"2", " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"\[Alpha]", "-", 
    RowBox[{"Ls", " ", "\[Alpha]"}]}]], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"2", " ", "b", " ", "m", " ", 
     RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["m", "2"]}], ")"}], " ", 
     RowBox[{"Sinh", "[", 
      RowBox[{"Ls", " ", "\[Alpha]"}], "]"}]}], "+", 
    RowBox[{"b", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sinh", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", "Ls"}], ")"}], " ", "\[Alpha]"}], "]"}], "+", 
       RowBox[{
        SuperscriptBox["m", "2"], " ", 
        RowBox[{"Sinh", "[", 
         RowBox[{"\[Alpha]", "-", 
          RowBox[{"Ls", " ", "\[Alpha]"}]}], "]"}]}]}], ")"}]}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{3.8530835674308634`*^9, 3.8530836497472143`*^9, 
  3.8530839892638903`*^9, 3.8539082979642887`*^9, 3.85470635943937*^9},
 CellLabel->
  "Out[184]=",ExpressionUUID->"32abec0b-6779-443d-8273-c8f2753b7399"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gamma", "[", 
      RowBox[{"[", "4", "]"}], "]"}], ".", "pMinus", ".", 
     RowBox[{"gamma", "[", 
      RowBox[{"[", "4", "]"}], "]"}]}], "-", "pPlus"}], "//", 
   "FullSimplify"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8535816652321787`*^9, 3.853581742516454*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"35103f6a-4a44-48f9-a499-ae3ab64f7ea9"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.853581678281355*^9, 3.8535817372562785`*^9}, 
   3.853581832224157*^9, 3.853908297972289*^9, 3.8547063596203785`*^9},
 CellLabel->
  "Out[185]//MatrixForm=",ExpressionUUID->"837a4c68-eaf7-450b-ba87-\
cf8031eaa735"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sqrt", "[", 
      RowBox[{"3", "/", 
       RowBox[{"(", 
        RowBox[{"4", "Pi"}], ")"}]}], "]"}], "/", 
     RowBox[{"(", 
      RowBox[{"3", "/", "4"}], ")"}]}], 
    RowBox[{
     RowBox[{"2", "^", 
      RowBox[{"(", 
       RowBox[{"-", "t"}], ")"}]}], "/", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"t", "+", 
        RowBox[{"3", "/", "4"}]}], ")"}], "^", 
      RowBox[{"(", 
       RowBox[{"3", "/", "2"}], ")"}]}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.855915005143669*^9, 3.8559150931669893`*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"e2591653-ab1d-465f-bb9f-48ac1af45c86"],

Cell[BoxData[
 FractionBox[
  RowBox[{"2", " ", 
   RowBox[{"LerchPhi", "[", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", 
     FractionBox["3", "4"]}], "]"}]}], 
  SqrtBox[
   RowBox[{"3", " ", "\[Pi]"}]]]], "Output",
 CellChangeTimes->{{3.855915075095692*^9, 3.8559150936773214`*^9}},
 CellLabel->
  "Out[363]=",ExpressionUUID->"c9173300-b245-44a9-986e-d3de7997f0f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox[
   RowBox[{"2", " ", 
    RowBox[{"LerchPhi", "[", 
     RowBox[{
      FractionBox["1", "2"], ",", 
      FractionBox["3", "2"], ",", 
      FractionBox["3", "4"]}], "]"}]}], 
   SqrtBox[
    RowBox[{"3", " ", "\[Pi]"}]]], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[364]:=",ExpressionUUID->"68de1b52-5eac-4994-8445-61ca152f0896"],

Cell[BoxData["1.1970340410061182`"], "Output",
 CellChangeTimes->{3.8559150963064313`*^9},
 CellLabel->
  "Out[364]=",ExpressionUUID->"ac25cc33-8b7f-48a1-b788-1e2323377eca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox[
   RowBox[{"LerchPhi", "[", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", 
     FractionBox["7", "4"]}], "]"}], 
   SqrtBox[
    RowBox[{"3", " ", "\[Pi]"}]]], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[362]:=",ExpressionUUID->"7d41042b-cffd-4d94-919d-0d4826b7be90"],

Cell[BoxData["0.19403033692121816`"], "Output",
 CellChangeTimes->{3.8559150829340844`*^9},
 CellLabel->
  "Out[362]=",ExpressionUUID->"81ea03f6-3ec4-4103-a8cf-c4b6b151b201"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1-cos(x)", "WolframAlphaLong",
 CellChangeTimes->{{3.8561747087846394`*^9, 3.8561747115701513`*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"faea4b95-8371-436c-8a8e-fd7f2471039e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "1-cos(x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - Cos[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"1", "-", 
               RowBox[{"cos", "(", "x", ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1 - Cos[x], {x, -2 Pi, 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max490$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min489$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max490$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1393400$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min489$\
1393405$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max490$1393406$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max490$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min489$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1393400$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min489$\
1393405$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max490$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max490$\
1393406$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393377[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$], \
(-2) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max490$$]], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min489$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max490$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min489$$ + 
                    Rational[1, 250] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max490$$]], 
                    2 Pi]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min489$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max490$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1393377]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393377[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393377[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVt9v0zAQbim/f8N/\
gMQz0igP7AEJ6GBMGlCS8l4vvjQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5TW/\
g6bE1IznPZSHou9NcgdZMivQKPrttTQxmDzj5AdT7rlvzXqo5Mf78Ct8nPCk4MfDVMM4MAz3dVyTPW\
KJrz1ixY/uTKZcJ4ewnPN0Z7g6HL3c9DMYyJsaAEnrYFjLPFNGQ9hDomjVvORHf/\
PFRefxUcB7D9wJEAvqB9U4UoRZGCsIxn+\
BbLzdTdzExQwQlil44TU6eo7YXaKOYmE1gnuMb55O10xaYqJn23NwrudmkIB/+\
TXwgYxeT97ik3dkRGBbGJaPvrKz+OXcDPL9uC6/\
kyXriML83HHkjhh2DXqXzWes6eUaqrnXRL7i6qPmy1SDPnzL1/\
9Ih02Y1jOdtw4D5ka3xeu2twr9oCy9z7PqFuO9b89k7SsB1w6ES3EdJC76IopnywEu0fbo6tw6Pcaf\
iO0ZnSAUrnMjGWfaL64+HFXi9KcRYu+kWpCPqGRBBDtZFHbd7bMbMKCOKJBZ4cV2/\
bLKJrEMJuLN97ZmgzA4wT8im5QnNQbpUd2KS7MsfFbeSy5kmQ94PhIEZqI2iv4X1UZZcQScyMJIYL2\
jqNZjDKqkxUcGyH5QgcU4EQ0j2y37cN/9wuRJI1b5CdSnP4sCV5jQ8iX5Z4EMQM5M1d+\
zA0RXctphNJE9q1UUsTZenzfaY7jeZbtzQHOihJISWJHygd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNcBHjv9JvLOS4vg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1 - Cos[x], {x, -8 Pi, 8 Pi}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max492$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min491$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min491$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max492$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1393497$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min491$\
1393498$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max492$1393499$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max492$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min491$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1393497$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min491$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min491$\
1393498$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max492$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max492$\
1393499$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393476[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min491$$], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803417` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803417` Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min491$$], \
(-8) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min491$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max492$$]], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803417` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803417` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min491$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max492$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min491$$ + 
                    Rational[2, 125] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max492$$]], 
                    8 Pi]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min491$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max492$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1393476]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393476[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1393476[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkUYnBB+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3m2PXw93Hn10sFgLGPQmkiuhm0h80yCIkkPgW4Y844B/+\
aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisrbbAoNMlePmfsnNOgW58\
G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetA2DzI5NjVdrbxl+py28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgM5X7iu"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigFactor[1 - Cos[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"2", " ", 
               RowBox[{
                 SuperscriptBox["sin", "2"], "(", 
                 FractionBox["x", "2"], ")"}]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[1 - Cos[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 FractionBox[
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}]], "2"]}], "-", 
               FractionBox[
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"\[ImaginaryI]", " ", "x"}]], "2"], "+", "1"}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "SymbolicSolution", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[1 - Cos[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], Identity]}], 
                    RowBox[{"n", "\[Element]", 
                    TemplateBox[{}, "Integers"]}]}, "RowWithSeparators"], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "SymbolicSolution__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "SymbolicSolution__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Z is the set of integers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Integer root", "scanner" -> "Reduce", "id" -> 
     "IntegerSolution", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[1 - Cos[x] == 0, x, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", "0"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IntegerSolution__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[1 - Cos[x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}], 
              "\"}\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Periodicity"}, {
       XMLElement["minput", {}, {"FunctionPeriod[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"periodic in \"", "x", "\" with period \"", 
                  RowBox[{"2", " ", "\[Pi]"}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[1 - Cos[x] == 1 - Cos[-x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=0.", "position" -> "700", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[1 - Cos[x], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "24"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "6"], "720"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "7"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 2, 7, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "24"]}], ",", "0", ",", 
                    FractionBox["1", "720"]}], "}"}], ",", "2", ",", "7", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"sin", "(", "x", ")"}], Identity]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"x", "-", 
                    RowBox[{"sin", "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Global maxima", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMaximum", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"max", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], HoldForm], "}"}]}], 
                   "\[LongEqual]", "2"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "-", "\[Pi]"}]}]}],
                "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"max", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], HoldForm], "}"}]}], 
                   "\[LongEqual]", "2"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", "\[Pi]"}]}]}],
                "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "GlobalMaximum__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMaximum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Global minima", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMinimum", "position" -> "1100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[1 - Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"min", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], HoldForm], "}"}]}], 
                   "\[LongEqual]", "0"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "GlobalMinimum__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "1200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - Cos[x] == 1 - Cosh[I x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "-", 
                  RowBox[{"cosh", "(", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}], ")"}]}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - Cos[x] == 1 - Sec[x]^(-1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "-", 
                  FractionBox["1", 
                   RowBox[{"sec", "(", "x", ")"}]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1 - Cos[x] == 1 - Cosh[(-I) x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "-", 
                  RowBox[{"cosh", "(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}], ")"}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement[
       "info", {"text" -> "cosh(x) is the hyperbolic cosine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Cosh.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Cosh", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicCosine.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "sec(x) is the secant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sec.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sec", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Secant.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Cos/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1300", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1 - Cos[x] == 1 - Sum[((-1)^k x^(2 k))/(2 k)!, {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "-", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "k"}]]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "k"}], ")"}], "!"}]]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1 - Cos[x] \[Proportional] 1 - Sum[(-1)^k D[DiracDelta[x], {x, 1 + 2 \
k}], {k, 0, Infinity}]/HeavisideTheta[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[Proportional]", 
                RowBox[{"1", "-", 
                  FractionBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[PartialD]", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]], 
                    TemplateBox[{
                    RowBox[{"x"}]}, "DiracDeltaSeq"]}], 
                    RowBox[{"\[PartialD]", 
                    SuperscriptBox["x", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]]}], MultilineFunction -> 
                    None]}]}], 
                   TemplateBox[{
                    RowBox[{"x"}]}, "HeavisideThetaSeq"]]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1 - Cos[x] == 1 + Sum[((-1)^k (-Pi/2 + x)^(1 + 2 k))/(1 + 2 k)!, {k, \
0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "+", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["\[Pi]", "2"]}], "+", "x"}], ")"}], 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], "!"}]]}]}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "\[Theta](x) is the Heaviside step function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/HeavisideTheta.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/UnitStep", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HeavisideStepFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "\[Delta](x) is the Dirac delta function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/DiracDelta.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/DiracDelta", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/DeltaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Cos/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1400", "error" -> "false", "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"1 - Cos[x] == x Integrate[Sin[t x], {t, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"x", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"t", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"1 - Cos[x] == 1 + Integrate[Sin[t], {t, Pi/2, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"1", "-", 
                  RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                RowBox[{"1", "+", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    FractionBox["\[Pi]", "2"], "x"], 
                    RowBox[{
                    RowBox[{"sin", "(", "t", ")"}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1 - Cos[x] == 1 + ((I/2) Integrate[E^(s - x^2/(4 s))/Sqrt[s], {s, \
(-I) Infinity + \[Gamma], I Infinity + \[Gamma]}])/Sqrt[Pi] /; \[Gamma] > \
0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                  RowBox[{"1", "+", 
                    RowBox[{
                    FractionBox["\[ImaginaryI]", 
                    RowBox[{"2", " ", 
                    SqrtBox["\[Pi]"]}]], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"s", "-", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "s"}], ")"}]}]}]], 
                    SqrtBox["s"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"\[Gamma]", ">", "0"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1 - Cos[x] == 1 + ((I/2) Integrate[(4^s Gamma[s])/(x^(2 s) Gamma[1/2 \
- s]), {s, (-I) Infinity + \[Gamma], I Infinity + \[Gamma]}])/Sqrt[Pi] /; 0 < \
\[Gamma] < 1/2 && x > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\[LongEqual]", 
                  RowBox[{"1", "+", 
                    RowBox[{
                    FractionBox["\[ImaginaryI]", 
                    RowBox[{"2", " ", 
                    SqrtBox["\[Pi]"]}]], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["4", "s"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "s"}]], " ", 
                    TemplateBox[{"s"}, "Gamma"]}], 
                    TemplateBox[{
                    RowBox[{
                    FractionBox["1", "2"], "-", "s"}]}, "Gamma"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{"0", "<", "\[Gamma]", "<", 
                    FractionBox["1", "2"]}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"x", ">", "0"}]}, "RowDefault"], "\[NoBreak]", 
                    ")"}]}, "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Cos/07/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod15$$ = XMLElement[
   "pod", {
    "title" -> "Definite integral over a half-period", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralOverAHalfPeriod", "position" -> "1500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[1 - Cos[x], {x, 0, Pi}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "\[Pi]", "\[TildeTilde]", 
              "3.141592653589793`"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralOverAHalfPeriod__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod16$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a period", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegralOverAPeriod", 
     "position" -> "1600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[1 - Cos[x], {x, 0, 2 Pi}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"2", " ", "\[Pi]"}]], 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", "\[Pi]"}], Identity], "\[TildeTilde]", 
              TagBox["6.283185307179586`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralOverAPeriod__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod17$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegralMeanSquare", 
     "position" -> "1700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(1 - Cos[x])^2/(2 Pi), {x, 0, 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"2", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}], "2"], 
                    RowBox[{"2", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["3", "2"], Identity], "\[LongEqual]", 
              TagBox["1.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod18$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 ArcTan[Rational[3, 11]/Pi], 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 ArcTan[Rational[3, 11]/Pi], 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 ArcTan[Rational[3, 11]/Pi], 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 ArcTan[Rational[3, 11]/Pi], 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = ArcTan[Rational[3, 11]/Pi], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., CalculateScan`PlotterScanner`Private`x1$$ = 
                 Rational[-1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`x2$$ = 
                 Rational[1, 4] Pi, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x1$$], 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$], 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[Subtract, 
                    CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1296541$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1296546$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1296547$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1296548$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1296549$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1296550$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1296551$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1296552$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1296553$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1296554$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1296555$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1296556$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1296557$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1296558$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    ArcTan[Rational[3, 11]/Pi], 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = ArcTan[Rational[3, 11]/Pi], 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
 = -3., CalculateScan`PlotterScanner`Private`sa$$ = False, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    ArcTan[Rational[3, 11]/Pi], 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = ArcTan[Rational[3, 11]/Pi], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = ArcTan[Rational[3, 11]/Pi], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., CalculateScan`PlotterScanner`Private`x1$$ = 
                    Rational[-1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    Rational[1, 4] Pi}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1296541$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1296546$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1296547$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1296548$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1296549$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1296550$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1296551$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1296552$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1296553$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1296554$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1296555$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1296556$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1296557$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1296558$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + (
                    Rational[22, 3] Pi)/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    Rational[11, 3] Pi], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    Rational[11, 3] Pi]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(1 - Cos[$CellContext`x]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    Rational[11, 3] Pi]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    Rational[11, 3] Pi], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, Rational[11, 3] Pi], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 1}, {
                    13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 1} ((1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(1 - Cos[$CellContext`x]) == 0, $CellContext`x, Reals], 
                    1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[1 - Cos[$CellContext`x], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, Rational[11, 3] Pi]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, Rational[11, 3] Pi], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {Function[{$CellContext`x}, 
                    Sin[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{1, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 1}, {13, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, 1 - Cos[$CellContext`x]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"1", "-", 
                    RowBox[{"cos", "(", "x", ")"}]}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{
                    CalculateScan`PlotterScanner`Private`normalTF$$, True, 
                    ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 
                    ArcTan[Rational[3, 11]/Pi], ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkVZepH1AYnRjTBpQkvK9t8RJLFw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve02MRJP1er6euG/NBsDjZwtMTY0ZilouCx/tnuSRKUcGTa/\
jsjjEh0XuEwQ8SO99NY94LOQPtzm/wfWBRwUCTr5oyqilR0wMJeUYjVXvGkp6Yn0yZiIDRn+\
TZ9nDn9avhjoPBWMagNZFcvWgLmWcSFEl6CHTDmHcM+\
Dd3fFwePxWMheR7QXhE1EPjnUiIDYzgwDAf71uvNlP3MDENPAYZXzpNVp6jthcoLSlPJ2SW4xsXk7X\
dFhhkqhw390tu1inIhX8LH4jQxuQ8Nml7tgT6hXHF6Dsvq3/\
O3QDPb9vCS3G6mjjMb5chb6DpCVHLdD5vXSfHSNW1Nvo5V5c1XzYa5MVTpv5fOqJKL4cxbBsGmR2bG\
q/W3jL8y7bwIseun4v7gTGfnaMEXDUcKsF9FHHB5lE0Ux44ibZPV+\
XG4TDuVnyH6PSpYIUTmDjLfrH98agCrzeFEGs33YB0eD0DApIT44ott3s0pXqUgYTIAM+\
v65dNNhF1KB53tq895TE1A8wRsm55QnOYLNQddJR9+aPiVnI512TI+yHXJCVyrehvY32kIZfHE+\
EZSYgXNPXqzWGV1Bikt+wHJUiYA6cISX+Zj/3mHi5WAqk6kKgu6Vgc2NKc+SfRLwt8RHiqs+\
aO7Tm6vNsWswnEaa26gCbJ4rTZHNP9JtONG5oD3ZcE35L4D/RuU+g2hb+\
6KSztwd2a0K0J3ZrQrQndmvD/rgk2YvxX+g05X7iu"]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod19$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc2max$$ = 
                 ArcTan[2], $CellContext`sc2min$$ = 0, $CellContext`sc3$$ = 
                 ArcTan[
                   Rational[1, 2]], $CellContext`sc3max$$ = 
                 ArcTan[2], $CellContext`sc3min$$ = 
                 0, $CellContext`scColor1$$ = 
                 RGBColor[
                  0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                 RGBColor[
                  0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                 12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                 False, $CellContext`scTF3$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = 
                 Rational[-1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`x2$$ = 
                 Rational[1, 4] Pi, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x1$$], 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor3$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc3min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount3$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3123267$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3123272$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3123273$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$3123274$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$3123275$$ = 
                 False, $CellContext`sc1$3123276$$ = 
                 0, $CellContext`sc2$3123277$$ = 
                 0, $CellContext`sc3$3123278$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$3123279$$ = 
                 False, $CellContext`sc1min$3123280$$ = 
                 0, $CellContext`sc1max$3123281$$ = 
                 0, $CellContext`scCount1$3123282$$ = 
                 0, $CellContext`sc2min$3123283$$ = 
                 0, $CellContext`sc2max$3123284$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc2max$$ = 
                    ArcTan[2], $CellContext`sc2min$$ = 0, $CellContext`sc3$$ = 
                    ArcTan[
                    Rational[1, 2]], $CellContext`sc3max$$ = 
                    ArcTan[2], $CellContext`sc3min$$ = 
                    0, $CellContext`scColor1$$ = 
                    RGBColor[
                    0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                    RGBColor[
                    0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                    12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                    False, $CellContext`scTF3$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = 
                    Rational[-1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    Rational[1, 4] Pi}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3123267$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3123272$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3123273$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$3123274$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$3123275$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$3123276$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$3123277$$, 0], 
                    Hold[$CellContext`sc3$$, $CellContext`sc3$3123278$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$3123279$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$3123280$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$3123281$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$3123282$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$3123283$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$3123284$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 1]] + ((
                    CalculateScan`PlotterScanner`Private`i - 1)/(
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 1)) (Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}, CalculateScan`PlotterScanner`Private`j] -> 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 
                    1}], {}], {CalculateScan`PlotterScanner`Private`j, 3}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 5}}, {}, {0, 0, 7, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {19, 5, 
                    4}, {40, 1, 3, 0, 0, 3, 0, 5}, {16, 1, 5, 6}, {13, 3, 4, 
                    6, 5}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3123252, \
$CellContext`C$3123253, $CellContext`C$3123254}, $CellContext`C$3123254 - \
$CellContext`C$3123253 Cos[$CellContext`x] + $CellContext`C$3123252 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, Rational[5, 3] 
                    Pi], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, Rational[5, 3] 
                    Pi]}, PlotStyle -> Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 5}}, {}, {0, 0, 7, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {19, 5, 
                    4}, {40, 1, 3, 0, 0, 3, 0, 5}, {16, 1, 5, 6}, {13, 3, 4, 
                    6, 5}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3123252, \
$CellContext`C$3123253, $CellContext`C$3123254}, $CellContext`C$3123254 - \
$CellContext`C$3123253 Cos[$CellContext`x] + $CellContext`C$3123252 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, Rational[5, 3] 
                    Pi], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, Rational[5, 3] 
                    Pi]}, PlotStyle -> Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 5}}, {}, {0, 0, 7, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 4}, {16, 2, 4, 5}, {19, 5, 
                    4}, {40, 1, 3, 0, 0, 3, 0, 5}, {16, 1, 5, 6}, {13, 3, 4, 
                    6, 5}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3123252, \
$CellContext`C$3123253, $CellContext`C$3123254}, $CellContext`C$3123254 - \
$CellContext`C$3123253 Cos[$CellContext`x] + $CellContext`C$3123252 
                    Sin[$CellContext`x]], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, Rational[5, 3] 
                    Pi], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, Rational[5, 3] 
                    Pi]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] - C[2] Cos[$CellContext`x] + 
                    C[1] Sin[$CellContext`x], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{Derivative[1][$CellContext`y][$CellContext`x] + 
                    Derivative[3][$CellContext`y][$CellContext`x] == 0}], 
                    1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] - C[2] Cos[$CellContext`x] + 
                    C[1] Sin[$CellContext`x], {
                    C[1] -> 0, C[2] -> 1, C[3] -> 1}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] - C[2] Cos[$CellContext`x] + 
                    C[1] Sin[$CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3]}, 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] - C[2] Cos[$CellContext`x] + 
                    C[1] Sin[$CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}], CalculateScan`PlotterScanner`Private`j]}], {
                    1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 3}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`x -> $CellContext`x4619]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{$CellContext`sc3$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    8}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 9}, {{$CellContext`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`sc1max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 14}, {{$CellContext`scColor2$$, 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`sc2max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{$CellContext`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 19}, {{$CellContext`scColor3$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    20}, {{$CellContext`sc3min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{$CellContext`sc3max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{$CellContext`scCount3$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 23}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`x4619, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RlrLHpGADsakASUp770lTmLh2sF2tsE\
/Dz67SZq1qxTTAZrSh1N9aT7ffffd9Z6diCDp93o9ddOYD4LFyQ6enhozFvNcFDx+\
d55LohQVPLmBz+\
4ZExJ9QBj8ILHz3TbmvZBz0O78Ct8HFhUMNPmqKaOaEjU7lJBnNFK1ZyLpqfnJjIkIGP1Jno/\
2hqPh/r6DwVgmoDWRXI3aQuaZBEWSHgLdMuYtA/7NHZ+Ux08FYyH5XhAeEfXYeKcSYgMjODDMx/\
vW683UA0xMA49BxldOk5XnuO0FSkvK0ymZ5/\
jG5WTttQUGmSrHzcOSm00KcuHfwQcitDE5j03ani2BfmFcM/ouyuqfczfA8+\
u28FKcrScO83vDkDfQ9JSoVTpftK6TY6TqWhv9gqurmi9bDfLyKVP/\
Lx1TpVfDGLYNg8xPTI3Xa28V/mVbeJFj1y/E/\
ciYz85RAq4bDpXgPoq4YIsomikPnETbp6ty43AY9yu+Q3T6VLDCCUycZb/Y/\
titwOtNIcTazbYgHV7PgIDkxLhiy+0BTakeZyAhMsCL6/\
plk01FHYrHne1rT3lMzQBzhGxantAcJUt1Bx1lX/\
6ouJVcLjQZ8n7ENUmJ3Cj6u1gfacjl8VR4RhLiBU29enNYJTUB6S37QQkS5sApQtJf5mO/\
uYfLlUCqDiWqSzoWB7Y05/5J9MsCHxOe6qy5Y3uOLu+\
2xWwCcVarLqBJsjxttsd0v8l044bmQPclwbck/\
gO92xS6TeGvbgore3C3JnRrQrcmdGtCtyb8v2uCjRj/lX4DCRa4Rg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod20$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "2000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`n$$ = 1, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  8.988559861222557, 9.188305635916391}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 3, 
                    "backward iterations"}, {1, 2, 3, 4}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`n$$], 1, 
                    "multivalued inverses"}, {1, 2, 3}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    8.988559861222557, 9.188305635916391}}}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3784508$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$3784509$$ = 
                 0, CalculateScan`PlotterScanner`Private`n$3784510$$ = 0, 
                 CalculateScan`PlotterScanner`Private`sf$3784511$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`n$$ = 1, 
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    8.988559861222557, 9.188305635916391}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3784508$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$3784509$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`n$$, 
                    CalculateScan`PlotterScanner`Private`n$3784510$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$3784511$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Cases[
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`n}, {
                    
                    Table[(2 CalculateScan`PlotterScanner`Private`C1) Pi - 
                    ArcCos[1 - CalculateScan`PlotterScanner`Private`y], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}], 
                    
                    Table[(2 CalculateScan`PlotterScanner`Private`C1) Pi + 
                    ArcCos[1 - CalculateScan`PlotterScanner`Private`y], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}]}][#, 
                    CalculateScan`PlotterScanner`Private`n$$]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]], 
                    Blank[Complex]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-18.975848595914286`, 
                    18.975848595914286`}, {-18.975848595914286`, 
                    18.975848595914286`}}, 1, 2]], 
                    
                    Part[{{-18.975848595914286`, 
                    18.975848595914286`}, {-18.975848595914286`, 
                    18.975848595914286`}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-18.975848595914286`, 
                    18.975848595914286`}, {-18.975848595914286`, 
                    18.975848595914286`}}, 2, 2]], 
                    
                    Part[{{-18.975848595914286`, 
                    18.975848595914286`}, {-18.975848595914286`, 
                    18.975848595914286`}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-19.97457746938346, 
                    19.97457746938346}, {-19.97457746938346, 
                    19.97457746938346}}, ImageMargins -> 20, ImageSize -> 240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 3, 
                    "backward iterations"}, {1, 2, 3, 4}, ControlType -> 
                    SetterBar, ControlPlacement -> 1}, {{
                    CalculateScan`PlotterScanner`Private`n$$, 1, 
                    "multivalued inverses"}, {1, 2, 3}, ControlType -> 
                    SetterBar, ControlPlacement -> 2}, {{
                    CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 3}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    8.988559861222557, 9.188305635916391}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkWCVBh+\
QGN0YkwaUpHyvl1wSC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLkEpKnhyDZ/dMSYEvQeM/IDY+W4a817IGdHu/\
AbfJywqGNHwVVNGNQU1PZAkz2ikas9Y0hPzkykTEWH0Jzzb3nk1HL7ecTAYy5hoDZKr7baQeSaJgqS\
HQDeMeccI/+\
aOj8vjp4KxEL4XwCNQD413IklsYAQnDPPxvvVqM3UPE9OEx0TGl06Tleeo7QVKS8rTCcxyfONisl60\
BSYyVY6b+yU36xTkwr+FD0RoY3Iem7Q9WwL9wrhi9J2X1T/\
nboDnt23hpThdTRzmt8uQN6LpCahlOp+3rpNjpOpaG/2cq8uaLxsN8uIpU/\
8vHVGll8N42TYMmB2bGq/W3jL8sC28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AAHIwrthyu0dTqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UnOsq+/FFxK7mcazLk/\
ZBrSEGuFf1trI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVQdSFSXdCwObGnO/JPolwU+Ap7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgMIs7ju"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False, False, False, False}, True}, 
   Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False, False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False, False, False}, True}, Typeset`aux13$$ = {
   True, False, {False, False, False}, True}, Typeset`aux14$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "20", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "2.517", "parsetiming" -> "0.281", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1223185ei6fec4f64i0d00003a9cd2cf3aadce1h", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1224185ei6fec4f64i0d00001b8528h78gi641b44222294402565530544", "version" -> 
    "2.6", "inputstring" -> "1-cos(x)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 0., 
    "Date" -> {2022, 3, 13, 15, 38, 37.532107`9.326977834023687}, "Line" -> 
    366, "SessionID" -> 18509206939369329490}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "1-cos(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
         Typeset`pod20$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1088., {2009.8, 2015.2}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856174717664687*^9},ExpressionUUID->"7c650bfa-088e-4860-98df-\
cc35e423288f"]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"8f763c16-27f0-4991-b5e3-87360a671c57"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1550, 38, 88, "Input",ExpressionUUID->"740f5067-d198-449e-8e17-ccf578fe9fdc"],
Cell[2111, 60, 768, 22, 49, "Input",ExpressionUUID->"75efe0cc-4641-4ad3-af74-1ab9598d0a31"],
Cell[CellGroupData[{
Cell[2904, 86, 2299, 68, 107, "Input",ExpressionUUID->"c33e2859-8cbd-4cd1-955a-951126b71e18"],
Cell[5206, 156, 526, 11, 23, "Message",ExpressionUUID->"56d4ddd8-46da-4c4f-afae-4e04d919c267"],
Cell[5735, 169, 526, 11, 23, "Message",ExpressionUUID->"1a196158-02f8-4362-a665-13ba6f958a7d"],
Cell[6264, 182, 524, 11, 23, "Message",ExpressionUUID->"caad92f0-e38d-4289-b811-b552dbc73819"],
Cell[6791, 195, 528, 11, 23, "Message",ExpressionUUID->"4d3befb3-1921-4db3-9b8b-199008241985"]
}, Open  ]],
Cell[7334, 209, 7065, 212, 185, "Input",ExpressionUUID->"92f17380-9213-4a88-bf32-5bfb428ce6f7"],
Cell[14402, 423, 2987, 79, 68, "Input",ExpressionUUID->"7bf90efd-f64f-4282-8e42-e2a2d9dbef53"],
Cell[CellGroupData[{
Cell[17414, 506, 2340, 67, 88, "Input",ExpressionUUID->"693d1061-5990-4107-a3da-255094e82c13"],
Cell[19757, 575, 550, 11, 23, "Message",ExpressionUUID->"244477fd-b3b6-4fbe-8b97-9cea43421cc2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20344, 591, 412, 9, 28, "Input",ExpressionUUID->"53d023e6-b373-4b93-828a-d7159b9666c7"],
Cell[20759, 602, 4805, 127, 88, "Output",ExpressionUUID->"9eea88f2-0096-4609-b11d-6a19a5a2d174"]
}, Open  ]],
Cell[25579, 732, 4809, 108, 88, "Input",ExpressionUUID->"0650cb74-359f-4471-9ceb-412b93193255"],
Cell[30391, 842, 3492, 103, 88, "Input",ExpressionUUID->"50230619-a8f2-4b54-a294-7d5ba3ab15c5"],
Cell[33886, 947, 3298, 100, 101, "Input",ExpressionUUID->"e0a37022-c889-44d6-86f9-fe5ea0d8d061"],
Cell[CellGroupData[{
Cell[37209, 1051, 11134, 194, 127, "Input",ExpressionUUID->"667330f2-0a82-43f7-a25b-937d60c7e237"],
Cell[48346, 1247, 9253, 149, 475, "Output",ExpressionUUID->"509a3915-63f0-4641-9598-065365111584"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57636, 1401, 267, 6, 28, "Input",ExpressionUUID->"cfacf82f-c6b1-463b-86ff-13f6b175f6fa"],
Cell[57906, 1409, 182, 4, 32, "Output",ExpressionUUID->"e281f1a4-acb6-40dc-abc3-50ba2e461962"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58125, 1418, 791, 21, 28, "Input",ExpressionUUID->"ed8b2e87-136b-4388-8c4a-c6eb3d2fd59b"],
Cell[58919, 1441, 343, 6, 32, "Output",ExpressionUUID->"39fb340f-ed53-4d3e-bc46-13661d0bf61b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59299, 1452, 11012, 195, 166, "Input",ExpressionUUID->"28fdd3cf-22ac-4b54-9b58-fe5039325872"],
Cell[70314, 1649, 4834, 89, 305, "Output",ExpressionUUID->"e593395a-cb5f-4133-9569-96ec15783d74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75185, 1743, 227, 4, 28, "Input",ExpressionUUID->"abfa907a-6931-41ea-9bb3-aeece962f4d9"],
Cell[75415, 1749, 221, 3, 32, "Output",ExpressionUUID->"5742dd03-da4c-4a56-9001-2e335e0d06e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75673, 1757, 602, 15, 28, "Input",ExpressionUUID->"19cacceb-ca30-4ca4-8995-0066cc3686b4"],
Cell[76278, 1774, 228, 3, 32, "Output",ExpressionUUID->"2245a570-a74c-4fb5-80f1-67b305b6b97c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76543, 1782, 505, 14, 28, "Input",ExpressionUUID->"5d26ee3d-8dc6-484e-8675-87f8f53a5efa"],
Cell[77051, 1798, 263, 8, 54, "Output",ExpressionUUID->"ad6adc2c-1318-40a6-a306-68ffb67c9d7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77351, 1811, 2044, 43, 28, "Input",ExpressionUUID->"d07e2325-3278-4de3-a094-fc044163709d"],
Cell[79398, 1856, 2239, 57, 64, "Output",ExpressionUUID->"e2b6596f-69d3-47dc-8462-27f2fb91a075"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81674, 1918, 1212, 32, 28, "Input",ExpressionUUID->"2783c5de-079b-441c-9b25-13a408ecae75"],
Cell[82889, 1952, 1002, 26, 59, "Output",ExpressionUUID->"cdb7b73d-f852-41c7-be4c-36c54651a6a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83928, 1983, 1257, 30, 28, "Input",ExpressionUUID->"6ef2dd52-759b-4773-90e7-f736e7989c17"],
Cell[85188, 2015, 879, 24, 35, "Output",ExpressionUUID->"10409b07-1bda-4e29-935f-fa7c40631752"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86104, 2044, 1652, 41, 49, "Input",ExpressionUUID->"dc2e2e23-f770-41b8-b514-eb55a33521b7"],
Cell[87759, 2087, 20609, 560, 338, "Output",ExpressionUUID->"065ced74-d016-468b-8000-b4db313e18b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108405, 2652, 2030, 47, 49, "Input",ExpressionUUID->"9b048b16-f523-41c3-a65f-c11eca96bf46"],
Cell[110438, 2701, 8174, 229, 236, "Output",ExpressionUUID->"782d3672-ae21-42db-b90c-137a1247ae2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118649, 2935, 2247, 50, 49, "Input",ExpressionUUID->"813c23b4-be42-4e27-934f-37ce6df5df37"],
Cell[120899, 2987, 5424, 165, 167, "Output",ExpressionUUID->"28011744-ebe6-4496-bade-8d6e9fe97d2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126360, 3157, 2254, 50, 49, "Input",ExpressionUUID->"bf4dc7ca-7122-45e3-b1b7-3fd224309aa2"],
Cell[128617, 3209, 4331, 133, 144, "Output",ExpressionUUID->"189b6920-0352-49de-a245-44fbe6de5f38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132985, 3347, 952, 27, 28, "Input",ExpressionUUID->"d7e29c3f-3316-40bf-a7cc-cd354ba2f6f8"],
Cell[133940, 3376, 1898, 39, 329, "Output",ExpressionUUID->"05c3f08e-ab5a-4d4c-be17-8ffdfa28724f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135875, 3420, 626, 18, 28, "Input",ExpressionUUID->"d5146ffc-c4a8-48ee-b9c8-20c7f0585e15"],
Cell[136504, 3440, 1602, 45, 68, "Output",ExpressionUUID->"45753d49-01eb-4ce6-9818-9d4a8044d29f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138143, 3490, 366, 10, 28, "Input",ExpressionUUID->"a3423fa9-7147-4186-b390-5b53ba82b2f8"],
Cell[138512, 3502, 1089, 31, 45, "Output",ExpressionUUID->"37109752-5cca-46a5-aec6-51a6fe8cb929"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139638, 3538, 474, 12, 28, "Input",ExpressionUUID->"5565f276-3bca-476a-8f2c-20b4719c1bc7"],
Cell[140115, 3552, 603, 17, 59, "Output",ExpressionUUID->"c08641b0-b021-44c7-93ed-b9b308206f08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140755, 3574, 725, 20, 28, "Input",ExpressionUUID->"9ff272a1-13a8-47a5-88d0-e3bba79f95e4"],
Cell[141483, 3596, 455, 11, 23, "Message",ExpressionUUID->"68bd68fb-f7dd-463d-88ec-d9d163739f4a"],
Cell[141941, 3609, 2715, 87, 112, "Output",ExpressionUUID->"444c02de-ce00-4728-b056-8070b779044f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144693, 3701, 1863, 46, 49, "Input",ExpressionUUID->"e15a39cd-3b0e-4ab8-bd49-cbe2cab442c3"],
Cell[146559, 3749, 2155, 57, 35, "Output",ExpressionUUID->"f0684cb9-29f7-4bad-a113-1725eed6e1e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148751, 3811, 1099, 29, 28, "Input",ExpressionUUID->"d39dfe81-0005-406a-8b32-e77d412fbeef"],
Cell[149853, 3842, 1901, 38, 309, "Output",ExpressionUUID->"3738a930-7e15-4fd4-86e2-23e56ccbf860"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151791, 3885, 933, 28, 28, "Input",ExpressionUUID->"645dc315-8b8a-4ad5-b0e9-ab0b8adb15f9"],
Cell[152727, 3915, 8762, 166, 239, "Output",ExpressionUUID->"6cd098b1-03c9-4d3b-ab74-958ef8771d19"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161526, 4086, 591, 17, 28, "Input",ExpressionUUID->"99d26dc1-8c77-47b1-b0ba-3b83501eb557"],
Cell[162120, 4105, 901, 27, 50, "Output",ExpressionUUID->"d8c7f6d1-dc06-41d1-bb92-310181e7d6a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163058, 4137, 687, 21, 28, "Input",ExpressionUUID->"c5ad8a24-c219-43eb-affa-bd4c71efdf16"],
Cell[163748, 4160, 564, 17, 50, "Output",ExpressionUUID->"42d03cda-279e-4c99-a6f8-14cc4956afa2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164349, 4182, 1003, 31, 28, "Input",ExpressionUUID->"4c3afb41-d501-4efd-92e5-e1b88334fa8a"],
Cell[165355, 4215, 816, 26, 60, "Output",ExpressionUUID->"c436f5a2-6bb9-4d6e-8a43-c62d41fd7295"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166208, 4246, 3889, 106, 149, "Input",ExpressionUUID->"a92a3bb5-e5bf-4ed6-8a59-035d99825b6e"],
Cell[170100, 4354, 3504, 64, 297, "Output",ExpressionUUID->"0058305a-ad99-48fc-acca-af37fcdc647f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173641, 4423, 1306, 40, 62, "Input",ExpressionUUID->"21469b6c-ebc6-4d4e-af13-4b1530f5b701"],
Cell[174950, 4465, 684, 23, 59, "Output",ExpressionUUID->"9148995c-389c-458b-9059-4827e9086b97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[175671, 4493, 1374, 42, 59, "Input",ExpressionUUID->"8c216cec-059c-4167-b3d0-9de955847e76"],
Cell[177048, 4537, 655, 22, 59, "Output",ExpressionUUID->"72b5ff57-890b-40b4-bb85-b66e2caf4996"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177740, 4564, 1015, 31, 28, "Input",ExpressionUUID->"7b26bfcd-46bb-41ad-b3dc-efccce9cf3e9"],
Cell[178758, 4597, 1142, 37, 59, "Output",ExpressionUUID->"725296c3-7e56-43f8-938b-8d2c3af23a7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179937, 4639, 940, 28, 28, "Input",ExpressionUUID->"69e0b677-9395-43ca-a9d5-8e03a5896e5f"],
Cell[180880, 4669, 985, 33, 62, "Output",ExpressionUUID->"f9a5bc86-a335-4ce3-b519-02ab7984b5b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181902, 4707, 338, 8, 28, "Input",ExpressionUUID->"962ace9a-d9e3-4d65-9732-7205f7be0211"],
Cell[182243, 4717, 181, 3, 32, "Output",ExpressionUUID->"ed5fe410-53a3-45c1-b7e2-5276d9ebbb96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182461, 4725, 742, 23, 28, "Input",ExpressionUUID->"75c57d68-a25f-440b-a368-db15168bfa46"],
Cell[183206, 4750, 2295, 71, 58, "Output",ExpressionUUID->"2ecda6a6-ddb8-452c-a4a8-7ad30589e496"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185538, 4826, 1082, 27, 28, "Input",ExpressionUUID->"10525d4e-44df-4fff-81a9-4c4d7a450221"],
Cell[186623, 4855, 566, 14, 45, "Output",ExpressionUUID->"07367b54-abeb-4b35-8c60-edd2a4652b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187226, 4874, 1821, 43, 28, "Input",ExpressionUUID->"de1409e1-cd45-4e22-905d-1025efde05b6"],
Cell[189050, 4919, 727, 20, 32, "Output",ExpressionUUID->"5591d94e-0016-4e53-b84a-731334a3a484"]
}, Open  ]],
Cell[189792, 4942, 940, 26, 28, "Input",ExpressionUUID->"24391706-d87c-4f7f-9cea-18534e3528b1"],
Cell[CellGroupData[{
Cell[190757, 4972, 751, 17, 28, "Input",ExpressionUUID->"9b0c7103-8efe-469c-8bc1-a40d8a8d74ae"],
Cell[191511, 4991, 893, 26, 66, "Output",ExpressionUUID->"f06bba48-2c22-405d-9346-86fc2b51996a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192441, 5022, 2233, 55, 49, "Input",ExpressionUUID->"2640a51f-4465-41f3-a64e-f892031d159c"],
Cell[194677, 5079, 2886, 54, 303, "Output",ExpressionUUID->"0cd0c58b-610d-4cdc-8eb0-4dd2f256081e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197600, 5138, 377, 10, 28, "Input",ExpressionUUID->"f21aea8e-24bc-4e96-9e09-06753449835c"],
Cell[197980, 5150, 726, 22, 50, "Output",ExpressionUUID->"1f5a1aa5-fd67-488e-8b42-0415393e9427"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198743, 5177, 476, 10, 28, "Input",ExpressionUUID->"149c6186-4c1c-47ed-84c9-24896617521a"],
Cell[199222, 5189, 438, 10, 32, "Output",ExpressionUUID->"2d154ca3-0f6e-4ea3-a643-4ddac429c828"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199697, 5204, 353, 8, 28, "Input",ExpressionUUID->"f290f768-d35d-4731-8d71-86d37b911027"],
Cell[200053, 5214, 300, 5, 32, "Output",ExpressionUUID->"bbe2e3c5-9f1b-4d4a-988a-f73ffb90385e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200390, 5224, 1102, 32, 68, "Input",ExpressionUUID->"d055b4ca-2457-4a27-8074-ce4133abb678"],
Cell[201495, 5258, 6943, 180, 162, "Output",ExpressionUUID->"062a5be5-b988-440b-855d-3bb9ab1269b6"],
Cell[208441, 5440, 7052, 190, 188, "Output",ExpressionUUID->"22364de2-85e8-4371-b7f5-ed0de4e78c66"],
Cell[215496, 5632, 7474, 199, 203, "Output",ExpressionUUID->"d9a08ea0-46fb-49f6-b175-7f3e1a7d2560"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223007, 5836, 478, 12, 28, "Input",ExpressionUUID->"4fdb01ba-ab78-4bb0-95c6-37762e18491a"],
Cell[223488, 5850, 17774, 476, 170, "Output",ExpressionUUID->"4f42713f-e0b6-4d47-96b3-43e1506941ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241299, 6331, 276, 6, 28, "Input",ExpressionUUID->"2310420f-0c9d-41ae-8a11-13518b1eea0d"],
Cell[241578, 6339, 1114, 32, 35, "Output",ExpressionUUID->"32abec0b-6779-443d-8273-c8f2753b7399"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242729, 6376, 441, 12, 28, "Input",ExpressionUUID->"35103f6a-4a44-48f9-a499-ae3ab64f7ea9"],
Cell[243173, 6390, 793, 22, 94, "Output",ExpressionUUID->"837a4c68-eaf7-450b-ba87-cf8031eaa735"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244003, 6417, 773, 25, 28, "Input",ExpressionUUID->"e2591653-ab1d-465f-bb9f-48ac1af45c86"],
Cell[244779, 6444, 405, 12, 60, "Output",ExpressionUUID->"c9173300-b245-44a9-986e-d3de7997f0f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245221, 6461, 393, 13, 60, "Input",ExpressionUUID->"68de1b52-5eac-4994-8445-61ca152f0896"],
Cell[245617, 6476, 173, 3, 32, "Output",ExpressionUUID->"ac25cc33-8b7f-48a1-b788-1e2323377eca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245827, 6484, 364, 12, 60, "Input",ExpressionUUID->"7d41042b-cffd-4d94-919d-0d4826b7be90"],
Cell[246194, 6498, 174, 3, 32, "Output",ExpressionUUID->"81ea03f6-3ec4-4103-a8cf-c4b6b151b201"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246405, 6506, 189, 3, 41, "WolframAlphaLong",ExpressionUUID->"faea4b95-8371-436c-8a8e-fd7f2471039e"],
Cell[246597, 6511, 491058, 9162, 4035, "Print",ExpressionUUID->"7c650bfa-088e-4860-98df-cc35e423288f"]
}, Open  ]]
}
]
*)


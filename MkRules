
# HEAP OF OPTIONS THAT YOU MAY WANT TO TRY
#FC = /usr/lib64/mpi/gcc/mvapich2/bin/mpif90
#FC = /usr/lib64/mvapich2/bin/mpif90
#FCFLAGS = -ipo -no-prec-div -fp-model fast=2 -xHost -O3 -heap-arrays -g
#FCFLAGS = -g -ipo -O3 -no-prec-div -fp-model fast=2 -xHost -DMPI -DNP_X=1 -DNP_Y=1 -DNP_T=1 #-heap-arrays -CB -traceback
#FCFLAGS = -g -O3 -march=native -mtune=native -DMPI -DNP_X=1 -DNP_Y=1 -DNP_T=1
#FCFLAGS = -O0 -heap-arrays -warn all -C -traceback

#GNU SETTINGS
GNU_MPIFC    = mpif90
GNU_FC       = gfortran
GNU_FCFLAGS  = -O0 -Wall -ffree-line-length-none

#INTEL SETTINGS
INTEL_MPIFC  =mpiifort 
INTEL_FC     =ifort 
#INTEL_FCFLAGS= -ipo -no-prec-div -fp-model fast=2 -xHost -O3 -heap-arrays -g -warn all
INTEL_FCFLAGS=-g -O0 -heap-arrays -warn all -C -traceback
#INTEL_FCFLAGS=-g -O0 -heap-arrays 

ifeq ($(COMPILER), GNU)
MPIFC  =$(GNU_MPIFC)
FC     =$(GNU_FC)
FCFLAGS=$(GNU_FCFLAGS)
else ifeq ($(COMPILER), INTEL)
MPIFC  =$(INTEL_MPIFC)
FC     =$(INTEL_FC)
FCFLAGS=$(INTEL_FCFLAGS)
else 
$(error COMPILER not correctly specified (watch for whitespaces)) 
endif
$(info COMPILER: $(COMPILER))
$(info MPIFC   : $(MPIFC))
$(info FC      : $(FC))
$(info FCFLAGS : $(FCFLAGS))

LIBOBJS = avgitercounts.o dirac.o dum1.o dwf3d_lib.o \
       gauge.o gaussian.o gforce.o measure_module.o params.o \
       qmrherm_module.o remez.o remezg.o trial.o vector.o\
       comms.o random.o partitioning.o comms_partitioning.o \
       dirac_split.o qmrherm_module_split.o


.PHONY: clean

COMPILE = $(FC) $(FCFLAGS) $(COMMS_FLAGS) ${RANDOM_FLAGS} -c 


# MODULES AND OBJECT FILES
# generic rule for all modules
%.mod : %.o
	touch $@

# generic rule for dum,gauge,gforce,remez,remezg,trial,vector,partitioning
%.o : $(TOPDIR)/%.F90 .makefile.uptodate params.mod
	$(COMPILE) -o $*.o $<

partitioning.o : $(TOPDIR)/partitioning.F90 .makefile.uptodate params.mod \
                 comms.mod
	$(COMPILE) -o $*.o $<

comms_partitioning.o : $(TOPDIR)/comms_partitioning.F90 .makefile.uptodate \
        params.mod partitioning.mod
	$(COMPILE) -o $*.o $<

dirac.o : $(TOPDIR)/dirac.F90 .makefile.uptodate params.mod comms.mod
	$(COMPILE) -o $*.o $<

dirac_split.o : $(TOPDIR)/dirac_split.F90 .makefile.uptodate params.mod \
    comms.mod dirac.mod partitioning.mod
	$(COMPILE) -o $*.o $<

avgitercounts.o : $(TOPDIR)/avgitercounts.F90 \
        .makefile.uptodate
	$(COMPILE) -o avgitercounts.o $<

qmrherm_module.o : $(TOPDIR)/qmrherm_module.F90 \
        .makefile.uptodate params.mod vector.mod gforce.mod \
        comms.mod dirac.mod
	$(COMPILE) -o qmrherm_module.o $<

bulk_rhmc.o : $(TOPDIR)/bulk_rhmc.f90 .makefile.uptodate \
        dwf3d_lib.mod
	$(COMPILE) -o $*.o $<

dwf3d_lib.o : $(TOPDIR)/dwf3d_lib.F90 \
    .makefile.uptodate avgitercounts.mod comms.mod dirac.mod \
    dum1.mod gauge.mod gaussian.mod gforce.mod measure_module.mod \
    params.mod qmrherm_module.mod random.mod remez.mod remezg.mod \
    trial.mod vector.mod
	$(COMPILE) -o dwf3d_lib.o $<

gaussian.o : $(TOPDIR)/gaussian.F90 .makefile.uptodate \
        comms.mod params.mod random.mod 
	$(COMPILE) -o gaussian.o $<

measure_module.o : $(TOPDIR)/measure_module.F90 \
        .makefile.uptodate params.mod gaussian.mod trial.mod \
        vector.mod comms.mod dirac.mod 
	$(COMPILE) -o measure_module.o $<


# COMMUNICATION-RELATED 
ifeq ($(MPI), yes)
COMMS_FLAGS = -DMPI -DNP_X=$(NP_X) -DNP_Y=$(NP_Y) -DNP_T=$(NP_T) 
FC = $(MPIFC)

comms.o :  $(TOPDIR)/comms.F90 .makefile.uptodate params.mod
	$(COMPILE) -o comms.o $<

else ifeq ($(MPI), no)

comms.o :  $(TOPDIR)/uncomms.f90 .makefile.uptodate params.mod
	$(COMPILE) -o comms.o $<

else ifeq ($(MPI), fake)
COMMS_FLAGS = -DMPI -DNP_X=$(NP_X) -DNP_Y=$(NP_Y) -DNP_T=$(NP_T) 
FC = $(MPIFC)

comms.o :  $(TOPDIR)/fake_comms.F90 .makefile.uptodate params.mod
	$(COMPILE) -o comms.o $<

else 
$(error MPI not correctly specified (watch for whitespaces))
endif

# RNG-RELATED
ifeq ($(SITE_RANDOM), yes)
RANDOM_FLAGS = -DSITE_RANDOM

random.o :  $(TOPDIR)/site_random.f90 .makefile.uptodate comms.mod params.mod
	$(COMPILE) -o random.o $<

else ifeq ($(SITE_RANDOM), no)

RANDOM_FLAGS = 

random.o : $(TOPDIR)/random.f90 .makefile.uptodate comms.mod
	$(COMPILE) -o random.o $<
else 
    $(error SITE_RANDOM not correctly specified (watch for whitespaces))
endif


#MISC
compile_flags: MkRules MkFlags
	echo $(FC) $(FCFLAGS) $(COMMS_FLAGS) ${RANDOM_FLAGS} > $@

